- introduce a connection class and use pexpect
  get rid of paramiko

  - instead printing fd (0 or 1) use the connection
    name.

- automatically create a documentation for all testcases
  default_vars and tbotlib functions.

  - html (doc/doc_ty.py)
    - testcase
      link to other testcases, defaultvars (may show them if
      mouse is over the name)
    - defaultvars
    - tbotlib

- use a dict() for all the parameters
  instead using src/common/tc_defaults.py

- Get Vars for TC from U-Boot Code
  started with, see TC:
  src/tc/tc_workfd_get_uboot_config_hex.py
  src/tc/tc_workfd_get_uboot_config_string.py

- cleanup tbot code
  - get rid of all retry places
  - clean up tbotlib function names

- introduce a "layering" like yocto do, so U-Boot TC can integrated
  into U-Boot source code.

  Proposal:
  introduce  subdirs in "src/tc"

       lab: all lab specific stuff
       lab/common: common lab stuff (for example ssh handling)
       lab/denx: denx specific


       u-boot: all u-boot tests
       u-boot/common: common u-boot tc
       u-boot/duts: DUTS tc
       u-boot-dxr2: all u-boot dxr2 board specific tc

       board: board tc
       board/common: common boar tc
       board/dxr2: all tc for dxr2 board

       linux: all linux tc
       linux/common: common linux tc
       linux/dxr2

       tbot: common tbot tc
       tbot/

  - need a mechanism in tbot, how it gets automatically for example
    U-Boot TC from U-Boot source...

- search TC names in src/tc through all subdirs

- simplify tbot log output (seperate a lot of output which is currently
  in INFO logging level, to another logging level)
  - make the timestamp configurable

- Find a way to document all TC and variables they use in an automated
  way.

- add manpages for the testcases

- call testcases with arguments

- if tbot fails, start a git biscect section
  and find out, which commit did it

  done!

  src/tc/tc_board_git_bisect.py

  - store commit id when tc is good -> last good commit
    id is known
    
    src/tc/tc_board_tqm5200s_ub_comp_install.py
    saves the u-boot.bin, if u-boot boots

    -> if u-boot boot fails with new u-boot
       old u-boot is known -> now extract from last
       working the commit id ... and start:
       src/tc/tc_board_git_bisect.py

       then this is done!

- testcases for yocto
  - install yocto
  - install meta ..
  - patch bblayers.conf
  - patch local.conf
  - call bitbake
  - cp images

- gpio tests
  - check registers with devmem
  - use readreg

- Delete from the tc_workfd_apply_patchwork_patches_list_hand
  python list an entry, if while "git am" the patch "git am"
  detects, that this patch is already in mainline.

- WDT timeout runtime changeable

- statistic/report module
  TC report start end (automatically) events to it
  TC specific events possible
  automatic timestamp generate
  also log events from each read/write
  -> at the end a specific format of the result can be
     generated, thorugh modules which are registered
     as backends on the event module.
     for eample:
     - cdash (notification to a central server, push principle)
     - dot graph (generate a graph from tcs for visual representation)
     - xunit report (xml file for Jenkins visualization)
     - DULG: create DULG specific files
     - kernelCI
     - format log output into a readable format
       may something like output from u-boot:/tools/test/py
