- First, what is a lab?

A lab is just combination of an lab host PC, which
operates as an switch between incoming tbot connections
and internal connections to consoles to boards, which are
connected to the lab host PC for testing purposes. If you
want to compile source code and test it on the boards
connected to it (which is what you want to do), it must
be able to compile your sources (the faster the better)

See also the image doc/tbot_structure.png

What to do for setting up a working lab:

- Setup the lab host PC:

  - Connect the lab PC to the Internet, so it is
    reachable for tbot.
    Preffered way currently ssh. So, it is possible to
    run somewhere the tbot, and connect to labs all over
    the world, which provides hw for real tests.

  - preferred OS: linux (but maybe not a must have, not
    tested)

  - This lab PC must have at least the ability to:
    - power on / off the board(s) which is(are)
      in the lab, through a cmdline command

    - get the current power state from the board(s)
      thorugh a cmdline command.

    - connect in some way (currently only serial
      is tested) to a console on the board.


Thats it ... not more ... this can be done in a very
cheap way ...

If you want do more better fancy testcases, you may want to
do more on the lab PC, for example:

- get current sources frome repos (like linux wiht git)
- compile this sources (Therefore devel tools must be
  installed on it, also toolchains
- maybe you want to find out, which git commit breaked
  the board ... you have to do "git bisect" on it ...
- maybe you want to use yocto for creating images, which you
  want test ... so it must be a very fast machine ...
- You may want to use some Userspace programs for testins
  (for example DFU tests, you need dfu-util run on the
   lab host pC, while on the board in U-Boot runs the
   dfu command)
- There are a lot of more ideas ...

- create a lab api file for your lab setup, see:
  doc/howto_add_new_lab.txt

- create for your board a board.cfg file

  if you use ssh for conencting to the lab host PC, simple
  copy a board.cfg file, which currently use ssh, for example:
  tbot_smartweb.cfg

  Edit there:
  self.boardname:
    Here you must change this name for the name you gave the board
    in your lab

  self.ip:
    add the ip address or name for reaching the host lab PC
    example:
    self.ip='pollux.denx.org'

  self.user:
    add the username for lgin in on your lab host PC
    self.user='hs'

  self.lab_api:
    add here the name of your lab api
    example:
    self.lab_api='denx'
    and include it
    example:
      #include lab api
      sys.path.append("src/lab_api")
      from denx import tbot_lab_api

  maybe changes some timeouts:
    self.accept_all=True
    self.keepalivetimeout=1
    self.channel_timeout=0.5
    self.read_line_retry=4 

  maybe set other log level
    self.loglevel='INFO'

  maybe set other prompts:
    self.uboot_prompt = 'U-Boot>'
    self.linux_prompt = 'ttbott#'

  maybe set tc variables for your testcase needs ...

- create for your board testcases and/or reuse existing
  testcases. At the end, it is useful to create a board
  testcase, which calls all testcases, you want to execute
  on this board ...
