.\" Man page generated from reStructuredText.
.
.TH "TBOT" "1" "November 25, 2016" "2016.12" "tbot"
.SH NAME
tbot \- tbot Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
tbot is a tool for automating commandline tasks.
Especially tasks like compiling source code,
installing the resulting images on the target
and execute testcases on the new bootet images.
.sp
Sources are hosted at \fI\%https://github.com/hsdenx/tbot\fP
.SH TBOT OVERVIEW
.SS Short description
.INDENT 0.0
.IP \(bu 2
execute testcases on real hw
.IP \(bu 2
testcases written in python
.IP \(bu 2
call testcases from another testcase
.IP \(bu 2
Based on ideas from:
\fI\%http://www.denx.de/wiki/DUTS/DUTSDocs\fP
.UNINDENT
.SS Usage
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ tbot.py \-\-help
Usage: tbot.py [options]

Options:
  \-h, \-\-help            show this help message and exit
  \-c CFGFILE, \-\-cfgfile=CFGFILE
                        the tbot board configfilename
  \-s LABFILE, \-\-slabfile=LABFILE
                        the tbot lab configfilename
  \-l LOGFILE, \-\-logfile=LOGFILE
                        the tbot logfilename, if default, tbot creates a
                        defaultnamelogfile
  \-t TC, \-\-testcase=TC  the testcase which should be run
  \-v, \-\-verbose         be verbose, print all read/write to stdout
  \-w WORKDIR, \-\-workdir=WORKDIR
                        set workdir, default os.getcwd()
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Demo
.sp
click on the gif to see the full video on youtube
[image]
.sp
\fI\%https://youtu.be/zfjpj3DLsx4\fP
.sp
demo video for a CAN bus testcase:
.sp
\fI\%https://youtu.be/hl7gI4b9CG8\fP
.sp
demo for a buildbot integration:
.sp
\fI\%http://xeidos.ddns.net/buildbot/tgrid\fP
.SS Installation
.SS install tbot on your PC (linux only tested):
.INDENT 0.0
.IP \(bu 2
get the source code:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/hsdenx/tbot.git
[...]
$
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
cd into the tbot directory.
.INDENT 0.0
.IP \(bu 2
you need the for running tbot the python paramiko module, see:
\fI\%http://www.paramiko.org/installing.html\fP
.sp
paramiko is used for handling ssh sessions, and open filedescriptors
on a ssh connection. Tbot open a ssh connection to a "lab PC" and
opens on that connection 2 filehandles, one for control functions
and one for the connection to the boards console. May it is worth
to think about to open more filehandles and use them in tbot, but
thats a point in the Todo list ...
.sp
See [1] for more infos about tbot principles.
.IP \(bu 2
prepare a directory for storing the logfiles
and pass it with the commandline option "\-l"
to tbot. Default is the directory "log" in the tbot
root (don;t forget to create it, if you want to use it)
.IP \(bu 2
If your VL is not yet in tbot source, integrate it
(This task has only to be done once for your VL):
.sp
A VL has basic 3 tasks:
.INDENT 2.0
.IP a. 3
power on/off the board
.IP b. 3
get power state of the board
.IP c. 3
connect to the boards console
.UNINDENT
.sp
As tbot sends only shell commands (also to the Lab PC)
this tasks must be executable through shell commands on your
Lab PC:
.IP \(bu 2
prepare a lab config file for your lab:
.INDENT 2.0
.IP \(bu 2
create a new folder in src/tc/lab/XXX
replace XXX to a proper value
.UNINDENT
.sp
Each VL needs a configuration file, passed with the option \(aq\-s\(aq to
tbot, example:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/config/lab_hs_home.py\fP
simple copy this and rename it to
\fI\%https://github.com/hsdenx/tbot/blob/master/config/lab_XXX.py\fP
and adapt the settings to your specific needs.
.IP \(bu 2
Then you have to setup Testcases for the 3 VL tasks:
.INDENT 2.0
.IP \(bu 2
Task a) power on/off board:
.sp
default TC for this task is:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/src/tc/lab/denx/tc_lab_denx_power.py\fP
.INDENT 2.0
.IP \(bu 2
now copy this file to for example
cp src/tc/lab/denx/tc_lab_denx_power.py src/tc/lab/XXX/tc_lab_XXX_power_onoff.py
and adapt the "remote_power" command from the denx lab to your needs.
.sp
As this TC powers on the board for all your boards in your VL,
you can differ between the boards through the tbot class
variable "tb.config.boardlabpowername" (which is in the default case the
same as "tb.config.boardname"), but you may need to name the power target
with an other name than boardname, so you can configure this case.
The power state "tb.power_state" which the TC has to set
is "on" for power on, or "off" for power off.
.sp
If switching on the power is successful, call "tb.end_tc(True)"
else "tb.end_tc(False)"
.IP \(bu 2
set in your lab config file:
tc_lab_denx_power_tc = \(aqtc_lab_XXX_power_onoff.py\(aq
.UNINDENT
.IP \(bu 2
Task b) power on/off board:
.sp
default TC for this task is:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/src/tc/lab/denx/tc_lab_denx_get_power_state.py\fP
.INDENT 2.0
.IP \(bu 2
now copy this file to for example
(replace XXX to a proper value)
cp src/tc/lab/denx/tc_lab_denx_get_power_state.py src/tc/lab/XXX/tc_lab_XXX_get_power_state.py
and adapt the commands to your needs.
.sp
If the power of the board is on, call "tb.end_tc(True)"
else "tb.end_tc(False)"
.IP \(bu 2
set in your lab config file:
tc_lab_denx_get_power_state_tc = \(aqtc_lab_XXX_get_power_state.py\(aq
.UNINDENT
.IP \(bu 2
Task c) connect to the boards console:
.sp
default TC for this task is:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/src/tc/lab/denx/tc_lab_denx_connect_to_board.py\fP
.INDENT 2.0
.IP \(bu 2
now copy this file to for example
cp src/tc/lab/denx/tc_lab_denx_connect_to_board.py src/tc/lab/XXX/tc_lab_XXX_connect_to_board.py
and adapt the commands to your needs.
.sp
If connect fails end this TC with "tb.end_tc(False)"
else call "tb.end_tc(True)"
.sp
If you want to use kermit for connecting to the boards console, you
can use:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/src/tc/linux/tc_workfd_connect_with_kermit.py\fP
.sp
Example for such a board in the VL from denx:
tc_lab_denx_connect_to_board_tc = \(aqtc_workfd_connect_with_kermit.py\(aq
.sp
\fI\%https://github.com/hsdenx/tbot/blob/master/config/tbot_dxr2.cfg#L20\fP
.IP \(bu 2
set in your lab config file:
tc_lab_denx_connect_to_board_tc = \(aqtc_lab_XXX_connect_to_board.py\(aq
.UNINDENT
.UNINDENT
.IP \(bu 2
prepare password.py file:
This file contains all passwords tbot needs (for example for
linux login on the boards)
tbot searches this file in the tbot root directory.
It is a simple python file, for example:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# passwords for the lab
if (board == \(aqlab\(aq):
    if (user == \(aqhs\(aq):
        password = \(aqpasswordforuserhs\(aq
    if (user == \(aqroot\(aq):
        password = \(aqpasswordforrootuser\(aq
# passwords for the boards
elif (board == \(aqmcx\(aq):
    if (user == \(aqroot\(aq):
        password = \(aqpasswordformcxrootfs\(aq
else:
    if (user == \(aqroot\(aq):
        password = \(aq\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
tbot searches in the root folder for this file.
.INDENT 0.0
.IP \(bu 2
prepare board config file
.sp
Each board which is found in the VL needs a tbot configuration file
pass the config file name with the option \(aq\-c\(aq to tbot, tbot searches
in the "config" folder for them.
.sp
board Example (dxr2 board):
\fI\%https://github.com/hsdenx/tbot/blob/master/config/dxr2.py\fP
.sp
Now comes a list of variables TC needs, this vary from what you
you want to test...
.UNINDENT
.sp
Thats it ... you now can call tbot and hopefully, it works ;\-)
.sp
If you have problems in settings up tbot, please contact me
(and may give me ssh access to your Lab PC ;\-)
.sp
Heiko Schocher <\fI\%hs@denx.de\fP>
v2 2016.11.02
.SH PRINCIPLES
.SS Test case (TC):
.INDENT 0.0
.INDENT 3.5
A piece of python code, which uses the tbot class.
Tbot provides functions for sending shell commands and parsing the
shell commands output.
Tbot waits endless for a shell commands end (detected through reading
the consoles prompt).
A TC can also call other TC\-es.
.sp
remark:
Tbot not really waits endless, for a shell commands end, instead
tbot starts a watchdog in the background, and if it triggers, tbot
ends the TC as failed. In the tbot beginning there was a lot of
timeouts / retry cases, but it turned out, that waiting endless
is robust and easy ...
.UNINDENT
.UNINDENT
.SS Host PC
.sp
where tbot runs, currently only linux host tested
must not be a powerful machine. For example, I run it on a raspberry Pi.
.SS Lab PC:
.sp
Host PC connects through ssh to the Lab PC, so it is possible to test boards, which are not at the same place as the Host PC.
.sp
(Lab PC and Host PC can be the same of course)
.sp
curently only Lab PC with an installed linux supported/tested.
.SS Boards(s):
.sp
the boards on which shell commands are executed.
.SS Board state:
.sp
equals to the software, the board is currently running.
.sp
Currently tbot supports 2 board states:
.INDENT 0.0
.IP \(bu 2
"u\-boot", if the board is running U\-Boot
.IP \(bu 2
"linux", if the board is running a linux kernel
.UNINDENT
.sp
A board state is detected through analysing the boards
shell prompt. In linux tbot sets a special tbot prompt,
in U\-Boot the prompt is static, and configurable through a
board config file.
.sp
A TC can say in which board state it want to send shell commands.
Tbot tries to detect the current board state, if board is not in
the requested  board state, tbot tries to switch into the correct
state. If this fails, the TC fails.
It is possible to switch in a single TC between board states.
.SS Virtual laboratory (VL)
.sp
VL is the basic environment that groups:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
[a number of] boards \- target devices on which tbot executes testcases.
.IP \(bu 2
one Lab PC
.IP \(bu 2
Basic tasks:
\- power on/off boards
\- read current power state of a board
\- connect to boards console
.UNINDENT
.UNINDENT
.UNINDENT
.sp
read more in doc/README.install how to integrate your own VL
.sp
Overview:
[image]
.SH EVENTS
.INDENT 0.0
.INDENT 3.5
tbot creates while executing testcases so called events.
After tbot ended with the testcase it can call event_backends,
which convert the events to different formats.
.sp
There are standard Events which tbot create automatically, for
example the Event "Start" is created when tbot starts a new
Testcase.
.sp
It is also possible to create Testcases specific Events. Therefore
a Testcase only has to call the function \fBcreate_event()\fP
.UNINDENT
.UNINDENT
.SS Eventlist
.SS current created standard Events
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
log
T}	T{
log content
T}
_
T{
Boardname
T}	T{
Name of board
T}
_
T{
BoardnameEnd
T}	T{
End of tests for Boardname
T}
_
T{
Start
T}	T{
Start of TC
T}
_
T{
End
T}	T{
End of TC
T}
_
.TE
.SS Testcases specific Events
.INDENT 0.0
.INDENT 3.5
\fI\%tc_lab_set_toolchain.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
Toolchain
T}	T{
used Toolchain
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_workfd_apply_patchwork_patches.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
PW_NR
T}	T{
current patchwork patchnumber
T}
_
T{
PW_CLEAN
T}	T{
current patchworknumber patch is clean or not
T}
_
T{
PW_AA
T}	T{
current patchworknumber patch is already applied
T}
_
T{
PW_APPLY
T}	T{
current patchworknumber patch is applies clean or not
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_lab_compile_uboot.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
UBOOT_DEFCONFIG
T}	T{
used U\-Boot configuration
T}
_
T{
UBOOT_SRC_PATH
T}	T{
path, where U\-boot source is located
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_ub_test_py.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
UBOOT_TEST_PY
T}	T{
path to test py result
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_ub_get_version.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
UBOOT_VERSION
T}	T{
U\-Boot/SPL version
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_lx_get_version.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
LINUX_VERSION
T}	T{
Linux version
T}
_
.TE
.INDENT 0.0
.INDENT 3.5
\fI\%tc_workfd_compile_linux.py\fP
.UNINDENT
.UNINDENT
.TS
center;
|l|l|.
_
T{
Event\-ID
T}	T{
content
T}
_
T{
LINUX_DEFCONFIG
T}	T{
used Linux configuration
T}
_
T{
LINUX_SRC_PATH
T}	T{
path, where Linux source is located
T}
_
.TE
.SS demos
.SS dashboard
.INDENT 0.0
.INDENT 3.5
\fI\%dashboard_source\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
pick some Events and put the content into a MYSQL database.
Now the DB content can be readen with a simple php script
to create a webpage, see for a minimal example:
.sp
\fI\%http://xeidos.ddns.net/tests/test_db_auslesen.php\fP
.UNINDENT
.UNINDENT
.SS statistic
.INDENT 0.0
.INDENT 3.5
\fI\%statistic_source\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
use gnuplot for a ploting some TC statistic results.
.sp
\fI\%http://xeidos.ddns.net/tbot/id_189/statistic.jpg\fP
.UNINDENT
.UNINDENT
.SS dot
.INDENT 0.0
.INDENT 3.5
\fI\%dot_source\fP
.UNINDENT
.UNINDENT
.sp
Use the Eventinformation for creating nice DOT graphics from the test.
see a raw example:
.INDENT 0.0
.INDENT 3.5
Demo Output of a git bisect \fI\%Demotestcase\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fI\%http://xeidos.ddns.net/tbot/id_171/graph.png\fP
.UNINDENT
.UNINDENT
.SS planned Event backends:
.sp
DUTS:
.INDENT 0.0
.INDENT 3.5
make from the logs tbot collected, DUTS specific textfiles, so the logs
can integrated into the DULG
.UNINDENT
.UNINDENT
.sp
xunit:
.INDENT 0.0
.INDENT 3.5
create xunit files for presenting the results in jenkins
.UNINDENT
.UNINDENT
.sp
kernel CI:
.INDENT 0.0
.INDENT 3.5
adapt to a format, so the testresults can be presented at kernel CI
(just an idea...)
.UNINDENT
.UNINDENT
.SH PROJECT'S ROAD-MAP
.sp
Here you will find "ideas" what can be done in tbot
.SS tbot internal
.SS tbotlib suggestions
.sp
Check if a TC ends with a prompt read
.sp
[simplify] create a "setup" script, which simplify setup after
tbot is installed. (Adapt all config variables for a new lab ...
Currently all defaultvalues are proper for the DENX lab)
.sp
[simplify] create testcases, specific for a specific SoC, so board
testcases can use them. For Example, create a tc_soc_imx6_xxx.py
testcases, which contains testcases we want to run on an imx based
board.
.sp
[simplify] make it possible to move virtual lab specific config options
into lab specific config files, and include them in board
config files
.sp
[simplify] make a documentation of "tbot conventions"
currently this are my personal conventions, if there are more
user try to identify my conventions and discuss and document them
.sp
currently they are hidden in default settings of tbot variables ...
.sp
[simplify] Get Vars for TC from U\-Boot Code
started with, see TC:
.INDENT 0.0
.IP \(bu 2
src/tc/tc_workfd_get_uboot_config_hex.py
.IP \(bu 2
src/tc/tc_workfd_get_uboot_config_string.py
.UNINDENT
.sp
simplify tbot usage ... all ToDo points marked with [simplify]
goal: show tbot installation/usage on 2 pages ... (maybe 1 is possible ?)
.INDENT 0.0
.IP \(bu 2
one for tbot installation and how to setup a virtual lab
.IP \(bu 2
one for how to setup a board testcase
.UNINDENT
.sp
call testcases with arguments
.sp
move testcases into functions and use python decorators ...
I played with this approach, but I am not happy with it.
.sp
rework tbot completly into a more pythonic style
.SS Event Backends
.SS Dokumentation Backend
.sp
extract for each testcase the logs in files
Filename: testcasename_connectionname_index_incnumber.txt
.INDENT 0.0
.IP \(bu 2
testcasename:   Name of TC
.IP \(bu 2
connectionname: Name of the tbot connection
.IP \(bu 2
index: counts, how often the TC was called, starts with 1
.IP \(bu 2
incnumber: each switch to another connection increments this number starts with 1
.UNINDENT
.sp
Now you have all logs in a seperate file, you can
integrate into a documentation
.sp
Saying the format of your documentation ist a rst file
.sp
You can for example define a keyword "tbotref:filename"
.sp
Now writting a script which searches in your document file
for the above keword, and replaces it with the content
of filename in for example
\fI\%http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#literal\-blocks\fP
format ...
.sp
and you can create a documentation with current logs.
.SS jenkins backend
.sp
simple convert the collected events into jenkins format,
so it is easy to integrate tbot into jenkins builds
.SS kernel\-ci backend
.sp
simple convert the collected events into a format, so
we can integrate tbot into kernel\-ci
.SH DOCUMENTATION OF TBOTLIB FUNCTIONS
.SS tbotlib
.INDENT 0.0
.TP
.B tbotlib.raw(text)
Returns a raw string representation of text
.UNINDENT
.INDENT 0.0
.TP
.B class tbotlib.tbot(workdir, labfile, cfgfile, logfilen, verbose)
Bases: \fBobject\fP
.sp
The tbot class
.sp
all begins here ...
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- workdir for tbot
.IP \(bu 2
\fBarg2\fP \-\- labfile
.IP \(bu 2
\fBarg3\fP \-\- board config file
.IP \(bu 2
\fBarg4\fP \-\- name of logfile
.IP \(bu 2
\fBarg5\fP \-\- be verbose
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B call_tc(name, **kwargs)
Call another testcase.
.INDENT 7.0
.INDENT 3.5
Search for the TC name
through all subdirs in \(aqsrc/tc\(aq.
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- name of testcase
.IP \(bu 2
\fBarg2\fP \-\- optional testcase argumentlist
.UNINDENT
.TP
.B Returns
.INDENT 7.0
.TP
.B False: If testcase was not found
or testcase raised an execption
.TP
.B ! called testcase sets the ret variable, which
this function returns. If called testcase
not set the ret variable default is false!
.UNINDENT

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B check_args(args)
Check if the args are in current argumentstack
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- args
.TP
.B Returns
If args no found, end testcase with False
.UNINDENT
.sp
else return args argument
.UNINDENT
.INDENT 7.0
.TP
.B check_debugger()
checks if a debugger is attached
.sp
If so, run the target. For this tc "tc_lab_bdi_run.py"
is called.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Returns
True
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B check_open_fd(c)
check, if stream is open.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.TP
.B Returns
True: If open
False: If stream open failed
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B cleanup()
.UNINDENT
.INDENT 7.0
.TP
.B con_log(*args)
logs a console string
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- console string
.TP
.B Returns

.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B connect_to_board(boardname)
connect to the board
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- boardname
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B debugprint(*args)
print a debug string on stdout.
.INDENT 7.0
.INDENT 3.5
This output can be enabled through self.config.debug
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- argument list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B disconnect_from_board(boardname)
disconnect from the board
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- boardname
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B end_tc(ret)
end testcase.
.sp
simple end a testcase.
.sp
ret contains True if testcase
ended successfully, False if not.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- return value True/False
.TP
.B Returns
calls sys.exit(0 if ret == True 1 else)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_call_tc(name, **kwargs)
call tc name, end testcase on failure
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- name of Testcase
.IP \(bu 2
\fBarg2\fP \-\- optional argument list
.UNINDENT
.TP
.B Returns
True if called testcase ends True, als call end_tc(False)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_expect_string(c, string)
expect a string, if prompt read end tc False
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- string expected
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write(c, string)
write a string to connection c
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- string
.UNINDENT
.TP
.B Returns
If write_stream returns not True, end tc
.UNINDENT
.sp
with failure
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_cmd(c, command)
write a command to fd, wait for prompt
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- commandstring
.UNINDENT
.TP
.B Returns
True if prompt read, else end testcase with False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_cmd_check(c, cmd, string)
send a cmd and check if a string is read.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- commandstring
.IP \(bu 2
\fBarg3\fP \-\- string which must be read
.UNINDENT
.TP
.B Returns
True if prompt and string is read
.UNINDENT
.sp
else end Testcase with False
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_cmd_list(c, cmdlist)
send a list of cmd to fd and wait for end
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- list of commandstrings
.UNINDENT
.TP
.B Returns
True if prompt found else endtestcase with False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_con(string)
write a string to console.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- commandstring
.TP
.B Returns
True if write_stream returns True, else end testcase with False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_con_lx_cmd(command)
write a linux command to console.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- commandstring
.TP
.B Returns
True if linux command was successful
.UNINDENT
.sp
else end testcase with False
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_con_passwd(user, board)
write a passwd to console. Do not log it.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- username
.IP \(bu 2
\fBarg2\fP \-\- board
.UNINDENT
.TP
.B Returns
If write_stream returns not True, end tc with failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_ctrl(string)
write a string to control connection.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- commandstring
.TP
.B Returns
If write_stream returns not True, end tc with failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_ctrl_passwd(user, board)
write a password to control. Do not log it.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- username
.IP \(bu 2
\fBarg2\fP \-\- board
.UNINDENT
.TP
.B Returns
If write_stream returns not True, end tc with failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B eof_write_workfd_passwd(user, board)
write a password to workfd. Do not log it.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- username
.IP \(bu 2
\fBarg2\fP \-\- board
.UNINDENT
.TP
.B Returns
If write_stream returns not True, end tc with failure
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B failure()
.UNINDENT
.INDENT 7.0
.TP
.B flush(c)
read out all bytes from connection
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_board_state(name)
.UNINDENT
.INDENT 7.0
.TP
.B get_power_state(boardname)
Get powerstate of the board in the lab
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- boardname
.TP
.B Returns
True if power state is on, else False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B overwrite_config(filename)
.UNINDENT
.INDENT 7.0
.TP
.B read_line(c)
read a line. line end detected through \(aq
\(aq
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 0.0
.TP
.B param arg1
connection
.TP
.B return
.INDENT 7.0
.TP
.B True: if a line is read
self.buf contains the line
.UNINDENT
.sp
False :if prompt read
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B send_console_end(c)
write Ctrl\-C to the opened stream
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B send_ctrl_c(c)
write Ctrl\-C to the opened stream
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.TP
.B Returns

.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B send_ctrl_c_con()
write Ctrl\-C to the opened stream
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B send_ctrl_m(c)
write Ctrl\-M to the opened stream
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_board_state(state)
set the board to a state
.sp
currrent states supported:
\(aqlab\(aq
\(aqu\-boot\(aq
\(aqlinux\(aq
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- state string
.TP
.B Returns
True if switching to state had success
.UNINDENT
.sp
else testcase fails.
.UNINDENT
.INDENT 7.0
.TP
.B set_power_state(boardname, state)
set powerstate for the board in the lab
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP (\fIstring\fP) \-\- boardname
.IP \(bu 2
\fBarg1\fP \-\- state on/off
.UNINDENT
.TP
.B Returns
True if setting state was successful, else False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_prompt(c, prompt, ptype)
set the prompt for the connection c.
.sp
If ptype = \(aqlinux\(aq add some special settings to the prompt.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- new promt string
.IP \(bu 2
\fBarg3\fP (\fIstring\fP) \-\- prompt type \(aqlinux\(aq
.UNINDENT
.TP
.B Returns
True: If setting the prompt was successful
.UNINDENT
.sp
False: If settting the prompt failed
.UNINDENT
.INDENT 7.0
.TP
.B set_term_length(c)
set terminal line length
.sp
ToDo How could this be set longer and do this correct
\- \fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP::
:param arg1: connection
:return: no return value
.UNINDENT
.INDENT 7.0
.TP
.B statusprint(*args)
print a status string on stdout.
.INDENT 7.0
.INDENT 3.5
This output can be enabled through self.config.debugstatus
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- argument list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_expect_prompt(c)
searches for prompt, endless
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- connection
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_expect_string(c, string)
expect a string
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- string expected
.UNINDENT
.TP
.B Returns
\(aqprompt\(aq if prompt found, True if string is found, else False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_fakult(n)
.UNINDENT
.INDENT 7.0
.TP
.B tbot_get_password(user, board)
get the password for the user/board
.INDENT 7.0
.INDENT 3.5
The passwords are in the password.py file
in the working directory. For example:
if (user == \(aqpasswordforuserone\(aq):
.INDENT 0.0
.INDENT 3.5
password = \(aqgnlmpf\(aq
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B if (user == \(aqanotheruser\(aq):
password = \(aqpasswordforanotheruser\(aq
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- user
.IP \(bu 2
\fBarg2\fP \-\- board
.UNINDENT
.TP
.B Returns
return password if found
end tc if not
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_read_line_and_check_strings(c, strings)
read a line and search, if it contains a string in strings.
.sp
If found, return index if read some chars, but no line,
check if it is a prompt, return \(aqprompt\(aq if it is a prompt.
if a string in strings found return index
else return None
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- a list of strings
.UNINDENT
.TP
.B Returns
index of string which is found
\(aqprompt\(aq if prompt found
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_rup_check_all_strings(c, strings, endtc=False)
read until prompt, and check if all strings in list strings are found
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- a list of strings
.UNINDENT
.TP
.B Returns
returns False, if not all strings in list are
.UNINDENT
.sp
found, or end tbot if endtc = True.
.UNINDENT
.INDENT 7.0
.TP
.B tbot_rup_error_on_strings(c, strings, endtc=False)
read until prompt and check, if a string in list is found.
.sp
If a string is found, end False.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- list of strings
.IP \(bu 2
\fBarg3\fP \-\- if endtc = True end with calling end_tc(True/False)
.UNINDENT
.TP
.B Returns
True if prompt and no string is found.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B tbot_start_wdt()
start the WDT process
.UNINDENT
.INDENT 7.0
.TP
.B tbot_trigger_wdt()
trigger the WDT
.UNINDENT
.INDENT 7.0
.TP
.B verboseprint(*args)
print a verbose string on stdout.
.INDENT 7.0
.INDENT 3.5
This output can be enabled through self.config.debug
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- argument list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_cmd_check(c, cmd, string)
send a cmd and check if a string is read.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- command send over connection
.IP \(bu 2
\fBarg3\fP \-\- string which must be read
.UNINDENT
.TP
.B Returns
True if prompt and string is read
.UNINDENT
.sp
else False
.UNINDENT
.INDENT 7.0
.TP
.B write_lx_cmd_check(c, command, endTC=True)
write a linux command to console.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- commandstring
.IP \(bu 2
\fBarg3\fP \-\- if True and linux cmd ended False end TC
with end_tc(False), else return True
.UNINDENT
.TP
.B Returns
if linux cmd ended successful True, else False
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_stream(c, string)
write a string to connection
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- string
.UNINDENT
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_stream_con(string)
write a string to console connection
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- string
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_stream_ctrl(string)
write a string to the ctrl connection
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBarg1\fP \-\- string
.TP
.B Returns
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B write_stream_passwd(c, user, board)
write a passwd for user to connection
.INDENT 7.0
.INDENT 3.5
If stream is not open, try to open it
Do not log it.
.UNINDENT
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- user
.IP \(bu 2
\fBarg3\fP \-\- board
.UNINDENT
.TP
.B Returns
return:
True: if write was successful
None: not able to open the stream
.UNINDENT
.UNINDENT
.UNINDENT
.SS event
.INDENT 0.0
.TP
.B class tbot_event.events(tb, logfile)
Bases: \fBobject\fP
.sp
The event class
.INDENT 7.0
.TP
.B create_event(pname, name, id, value)
create an event
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- parent name
.IP \(bu 2
\fBarg2\fP \-\- function name
.IP \(bu 2
\fBarg3\fP \-\- Event ID
.IP \(bu 2
\fBarg4\fP \-\- value for event ID
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create_event_log(c, dir, string)
create a log event
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- connection
.IP \(bu 2
\fBarg2\fP \-\- direction (r or w)
.IP \(bu 2
\fBarg3\fP \-\- log string
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B event_flush()
.UNINDENT
.INDENT 7.0
.TP
.B list_backend()
list all registered backends.
.sp
ToDo
.UNINDENT
.INDENT 7.0
.TP
.B register_backend()
register a backend.
.sp
ToDo
.UNINDENT
.UNINDENT
.SH DOCUMENTATION OF TBOT EVENT BACKENDS
.SS dashboard
.INDENT 0.0
.TP
.B class dashboard.dashboard(tb, host, user, pw, dbname, tname)
Bases: \fBobject\fP
.sp
extract tbot results to a mysql database
after tbot has finished
.sp
Prerequisites:
.sp
MySQLdb python module is needed, install it for
example on the raspberry pi with:
.sp
apt\-get install python\-mysqldb
apt\-get install sshpass
.INDENT 7.0
.INDENT 3.5
(needed fpr passing the password to scp)
.UNINDENT
.UNINDENT
.sp
If tb.config.create_dot == \(aqyes\(aq then you need the dot
.sp
command, please install this, see for example:
.sp
\fI\%http://askubuntu.com/questions/97552/how\-to\-install\-dot\-provided\-by\-graphviz\fP
.sp
If tb.config.create_statistic == \(aqyes\(aq you need the gnuplot
.sp
command. See an example for installing gnuplot here:
.sp
\fI\%http://askubuntu.com/questions/340579/how\-to\-install\-gnuplot\-in\-ubuntu\fP
.sp
The dashboard backend also collects information from other backends
(if they are enabled) and stores them in "webdir".
Currently this is a fix place, need here some work to make this
configurable. Currently it is placed at "/var/www/html", and subdir
"tbot" plus current MYSQL ID "id_%d" ...
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- tb
.IP \(bu 2
\fBarg2\fP \-\- host
.IP \(bu 2
\fBarg3\fP \-\- username
.IP \(bu 2
\fBarg4\fP \-\- pw
.IP \(bu 2
\fBarg5\fP \-\- dbname
.IP \(bu 2
\fBarg5\fP \-\- tname
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B insert_test_into_db()
starts with filling the DB
.UNINDENT
.UNINDENT
.SS documentation
.INDENT 0.0
.TP
.B class documentation.doc_backend(tb, ignorelist)
Bases: \fBobject\fP
.sp
extract from all executed testcases the logs from tbots connection.
.sp
Format of the created filenames:
.INDENT 7.0
.TP
.B testcasename_connectionname_index_incnumber.txt
testcasename:   Name of TC
connectionname: Name of the tbot connection
index: counts, how often the TC was called, starts with 1
incnumber: each switch to another connection increments this number
.INDENT 7.0
.INDENT 3.5
starts with 1
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This files could be used to create documentation
files, which contains logs.
.sp
enable this backend with "create_documentation = \(aqyes\(aq"
.sp
created files are stored in tb.workdir + \(aq/logfiles/
so, be sure you have created this directory.
.sp
Problem: First prompt is not visible
.sp
see \fI\%https://github.com/hsdenx/tbot/blob/testing/scripts/demo/documentation_backend/README\fP
for a demo, how you can create a html/pdf/man page, which
contains content of tbot logfiles and text around it.
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- tb
.IP \(bu 2
\fBarg2\fP \-\- list of strings, containing testcasesnames, which get ignored
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create_docfiles()
create the files
.UNINDENT
.UNINDENT
.SS dot
.INDENT 0.0
.TP
.B class dot.dot(tb, dotfile, ignorelist)
Bases: \fBobject\fP
.sp
create a dot description file from the executed testcases.
.INDENT 7.0
.TP
.B after tbot hs finsihed create a png with:
dot \-Tpng tc.dot > tc.png
.TP
.B or create a postscript with:
dot \-Tps tc.dot > tc.ps
.UNINDENT
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- tb
.IP \(bu 2
\fBarg2\fP \-\- filename, which contains the dot description data
.IP \(bu 2
\fBarg3\fP \-\- list of strings, containing testcasesnames, which get ignored
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create_dotfile()
create the dot file
.UNINDENT
.UNINDENT
.SS html_log
.INDENT 0.0
.TP
.B class html_log.html_log(tb, htmlfile)
Bases: \fBobject\fP
.sp
create a html log file after tbot hs finished
.sp
create a nicer log ... see for an example:
.sp
\fI\%http://xeidos.ddns.net/tbot/id_189/html_log.html\fP
.sp
the created html file needs the css file:
.sp
\fI\%https://github.com/hsdenx/tbot/blob/testing/log/multiplexed_tbotlog.css\fP
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- tb
.IP \(bu 2
\fBarg2\fP \-\- filename which gets created, place tb.workdir
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create_htmlfile()
create the html file
.UNINDENT
.UNINDENT
.SS statistic_plot
.INDENT 0.0
.TP
.B class statisitic_plot.statistic_plot_backend(tb, fdfile, ignorelist)
Bases: \fBobject\fP
.sp
create a statistic of called testcases
.sp
create a stat.dat file for creating a TC statistic image
with gnuplot
.sp
call "gnuplot balkenplot.sem" in tbot workdir after
a TBot is finsihed, so you need gnuplot installed on your system.
.sp
used balkenplot.sem file:
# set terminal png transparent nocrop enhanced size 450,320 font "arial,8" 
# set output \(aqhistograms.4.png\(aq
.sp
set boxwidth 0.75 absolute
set style fill   solid 1.00 border lt \-1
set key outside right top vertical Left reverse noenhanced autotitles columnhead nobox
set key invert samplen 4 spacing 1 width 0 height 0
set style histogram rowstacked title  offset character 0, 0, 0
set datafile missing \(aq\-\(aq
set style data histograms
set xtics border in scale 0,0 nomirror rotate by \-45  offset character 0, 0, 0 autojustify
set xtics  norangelimit font ",8"
set xtics   ()
set title "TC statistic"
.sp
set grid ytics
set terminal jpeg enhanced size 2048,768
set output "output.jpg"
.sp
i = 2
plot \(aqstat.dat\(aq using 2:xtic(1), for [i=3:3] \(aq\(aq using i
.INDENT 7.0
.IP \(bu 2
\fBparameters\fP, \fBtypes\fP, \fBreturn\fP and \fBreturn types\fP:
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBarg1\fP \-\- tb
.IP \(bu 2
\fBarg2\fP \-\- filename which gets created
.IP \(bu 2
\fBarg3\fP \-\- list of strings, containing testcasesnames, which get ignored
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B create_statfile()
create the statistic file
.UNINDENT
.UNINDENT
.SH DOCUMENTATION OF ALL TESTCASES
.SS src/tc/board/tc_board_aristainetos2.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_board_aristainetos2.py
# start all testcases for the aristainetos2 board
# tc_board_aristainetos2_linux_tests.py
# tc_workfd_set_toolchain.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_aristainetos2_py\fP\&.
\fIsrc_tc_board_tc_board_aristainetos2_linux_tests_py\fP\&.
\fIsrc_tc_tc_workfd_set_toolchain_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_aristainetos2.py\fP
.SS src/tc/board/tc_board_aristainetos2_linux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_board_aristainetos2_linux.py
# start all linux testcases for the aristainetos2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_aristainetos2_linux_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_aristainetos2_linux.py\fP
.SS src/tc/board/tc_board_aristainetos2_linux_bisect.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_board_aristainetos2_linux_bisect.py
# start a git bisect for the aristainetos2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_aristainetos2_linux_bisect_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_aristainetos2_linux_bisect.py\fP
.SS src/tc/board/tc_board_aristainetos2_linux_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_board_aristainetos2_linux_tests.py
# start all linux testcases for the aristainetos2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_aristainetos2_linux_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_aristainetos2_linux_tests.py\fP
.SS src/tc/board/tc_board_ccu1_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c ccu1 \-t tc_board_ccu1_tests.py
# start all testcases for the ccu1 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_ccu1_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_ccu1_tests.py\fP
.SS src/tc/board/tc_board_corvus.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c corvus \-t tc_board_corvus.py
# start all testcases for the corvus board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_corvus_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_corvus.py\fP
.SS src/tc/board/tc_board_dxr2.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c dxr2 \-t tc_board_dxr2.py
# start all testcases for the dxr2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2.py\fP
.SS src/tc/board/tc_board_dxr2_linux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c dxr2 \-t tc_board_dxr2_linux.py
# start all linux testcases for the dxr2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_linux_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2_linux.py\fP
.SS src/tc/board/tc_board_dxr2_lx_ubi_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_board_dxr2_lx_ubi_tests.py
# more dxr2 specific ubi tests, maybe make them common
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_lx_ubi_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2_lx_ubi_tests.py\fP
.SS src/tc/board/tc_board_dxr2_ub.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c dxr2 \-t tc_board_dxr2_ub.py
# start all u\-boot testcases for the dxr2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_ub_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2_ub.py\fP
.SS src/tc/board/tc_board_dxr2_ub_ubi.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c dxr2 \-t tc_board_dxr2_ub_ubi.py
# start all ubi testcases for the dxr2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_ub_ubi_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2_ub_ubi.py\fP
.SS src/tc/board/tc_board_dxr2_uboot_patchwork.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_dxr2_uboot.cfg \-t tc_board_dxr2_uboot_patchwork.py
# dxr2 check all patches with patchworknumber > default_nr
# in patchwork, if it is checkpatch clean and applies to
# current mainline without errors
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_dxr2_uboot_patchwork_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_dxr2_uboot_patchwork.py\fP
.SS src/tc/board/tc_board_fipad.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad.py
# start all U\-Boot/linux testcases for the fipad board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad.py\fP
.SS src/tc/board/tc_board_fipad_linux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad_linux.py
# start all linux testcases for the fipad board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_linux_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad_linux.py\fP
.SS src/tc/board/tc_board_fipad_ub_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad_ub_tests.py
# start all U\-Boot testcases for the fipad board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_ub_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad_ub_tests.py\fP
.SS src/tc/board/tc_board_fipad_upd_ub.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad_upd_ub.py
# update SPL and u\-boot.img on the SPI NOR or the MMC0
# card, and boot it ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_upd_ub_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad_upd_ub.py\fP
.SS src/tc/board/tc_board_fipad_upd_ub_mmc.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad_upd_ub_mmc.py
# update SPL and u\-boot.img on the MMC0
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_upd_ub_mmc_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad_upd_ub_mmc.py\fP
.SS src/tc/board/tc_board_fipad_upd_ub_spi.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c fipad \-t tc_board_fipad_upd_ub_spi.py
# update SPL and u\-boot.img on the SPI NOR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_fipad_upd_ub_spi_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_fipad_upd_ub_spi.py\fP
.SS src/tc/board/tc_board_flea3.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c flea3 \-t tc_board_flea3.py
# start all testcases for the flea3 board
# currently only test the nor unprotect with linux
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_flea3_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_flea3.py\fP
.SS src/tc/board/tc_board_mcx.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c mcx \-t tc_board_mcx.py
# start all testcases for the mcx board linux stable and linux\-ml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_mcx_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_mcx.py\fP
.SS src/tc/board/tc_board_mcx_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c mcx \-t tc_board_mcx_tests.py
# start all testcases for the mcx board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_mcx_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_mcx_tests.py\fP
.SS src/tc/board/tc_board_shc.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc.py
# start all testcases for the shc board linux and linux\-stable
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc.py\fP
.SS src/tc/board/tc_board_shc_compile_ml.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc_compile_ml.py
# compile ML linux kernel for the shc board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_compile_ml_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc_compile_ml.py\fP
.SS src/tc/board/tc_board_shc_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc_tests.py
# start all testcases for the shc board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc_tests.py\fP
.SS src/tc/board/tc_board_shc_ub_create_regdump.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc_ub_create_regdump.py
# create a uboot regdump for all interesting registers
# on the shc board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_ub_create_regdump_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc_ub_create_regdump.py\fP
.SS src/tc/board/tc_board_shc_ub_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc_ub_tests.py
# start all U\-Boot testcases for the shc board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_ub_tests_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc_ub_tests.py\fP
.SS src/tc/board/tc_board_shc_upd_ub.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c shc \-t tc_board_shc_upd_ub.py
# update MLO and u\-boot.img on the SD card or the eMMC
# card, and boot it ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_shc_upd_ub_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_shc_upd_ub.py\fP
.SS src/tc/board/tc_board_sigmatek\-nand.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c sigmatek\-nand \-t tc_board_sigmatek\-nand.py
# On the sigmatek\-nand board we have problems with a crash in U\-boot
# We do:
# \- wait until linux state is reached
# \- wait random seconds (3 \-10)
# \- power off the board
# \- wait 3 seconds for powering really of the board
# \- loop this 50 times
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_sigmatek\-nand_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_sigmatek\-nand.py\fP
.SS src/tc/board/tc_board_sirius_dds.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_sirius_dds.cfg \-t tc_board_sirius_dds.py
# On the sirius board we have problems with ubifs
# on nand flash and power cuts. So this is a special
# testcase for this board. We do:
# \- go into statte u\-boot
# \- start linux with ubifs as rootfs
# \- wait until Userspace APP SiriusApplicat is started
# \- wait random seconds (3 \-10)
# \- power off the board
# \- wait 3 seconds for powering really of the board
# \- loop this 50 times
# if we have an ubifs error, testcase ends with error
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_sirius_dds_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_sirius_dds.py\fP
.SS src/tc/board/tc_board_smartweb.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c smartweb \-t tc_board_smartweb.py
# start all testcases for the smartweb board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_smartweb_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_smartweb.py\fP
.SS src/tc/board/tc_board_taurus.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c taurus \-t tc_board_taurus.py
# start all testcases for the taurus board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_taurus_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_taurus.py\fP
.SS src/tc/board/tc_board_tqm5200s_try_cur_ub.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c tqm5200s \-t tc_board_tqm5200s_try_cur_ub.py
# remove current u\-boot code on the lab PC
# then call tc tc_board_tqm5200s_ub_comp_install.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_tqm5200s_try_cur_ub_py\fP\&.
\fIsrc_tc_board_tc_board_tqm5200s_ub_comp_install_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_tqm5200s_try_cur_ub.py\fP
.SS src/tc/board/tc_board_tqm5200s_ub_comp_install.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c tqm5200s \-t tc_board_tqm5200s_ub_comp_install.py
# compile and install U\-Boot for the tqm5200s board
# install U\-Boot with BDI
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_board_tqm5200s_ub_comp_install_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_board_tqm5200s_ub_comp_install.py\fP
.SS src/tc/board/tc_linux_create_reg_file_am335x.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_linux_create_reg_file_am335x.py
# create a regfile for am335x SoC registers
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_linux_create_reg_file_am335x_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_linux_create_reg_file_am335x.py\fP
.SS src/tc/board/tc_linux_create_reg_file_at91sam9g15.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_wivue2.cfg \-t tc_linux_create_reg_file_at91sam9g15.py
# create a regfile for at91sam9g15 SoC registers
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_linux_create_reg_file_at91sam9g15_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_linux_create_reg_file_at91sam9g15.py\fP
.SS src/tc/board/tc_linux_create_reg_file_imx6qdl.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_linux_create_reg_file_imx6qdl.py
# create a regfile for am335x SoC registers
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_board_tc_linux_create_reg_file_imx6qdl_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/board/tc_linux_create_reg_file_imx6qdl.py\fP
.SS src/tc/debugger/bdi/tc_lab_bdi_connect.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_bdi_connect.py
# connect to the BDI if tb.config.board_has_debugger != 0
# \- send to workfd tb.config.lab_bdi_upd_uboot_bdi_cmd
# \- set BDI prompt tb.config.lab_bdi_upd_uboot_bdi_prompt
# \- wait for BDI prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_debugger_bdi_tc_lab_bdi_connect_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_board_has_debugger\fP\&.
\fItb_config_lab_bdi_upd_uboot_bdi_cmd\fP\&.
\fItb_config_lab_bdi_upd_uboot_bdi_prompt\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/debugger/bdi/tc_lab_bdi_connect.py\fP
.SS src/tc/debugger/bdi/tc_lab_bdi_disconnect.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_bdi_disconnect.py
# disconnect from the BDI
# \- send bdi command "quit"
# \- set tb.config.linux_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_debugger_bdi_tc_lab_bdi_disconnect_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_linux_prompt\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/debugger/bdi/tc_lab_bdi_disconnect.py\fP
.SS src/tc/debugger/bdi/tc_lab_bdi_run.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_bdi_upd_uboot.py
# BDI run
# \- send "res halt" to workfd
# \- send BDI cmd tb.config.lab_bdi_upd_uboot_bdi_run
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_debugger_bdi_tc_lab_bdi_upd_uboot_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_lab_bdi_upd_uboot_bdi_run\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/debugger/bdi/tc_lab_bdi_run.py\fP
.SS src/tc/debugger/bdi/tc_lab_bdi_upd_uboot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_bdi_upd_uboot.py
# update u\-boot with BDI
# \- send BDI cmd: "res halt"
# \- send BDI cmd: "era"
# \- send BDI cmd:
#   tb.config.lab_bdi_upd_uboot_bdi_prog + \(aq \(aq + tb.config.lab_bdi_upd_uboot_bdi_file + \(aq BIN\(aq
# \- send BDI cmd: tb.config.lab_bdi_upd_uboot_bdi_run
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_debugger_bdi_tc_lab_bdi_upd_uboot_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_lab_bdi_upd_uboot_bdi_prog\fP\&.
\fItb_config_lab_bdi_upd_uboot_bdi_file\fP\&.
\fItb_config_lab_bdi_upd_uboot_bdi_run\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/debugger/bdi/tc_lab_bdi_upd_uboot.py\fP
.SS src/tc/default/tc_def_tbot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c cfgfile \-t tc_def_tbot.py
# simple set default values for tbot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_default_tc_def_tbot_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/default/tc_def_tbot.py\fP
.SS src/tc/default/tc_def_ub.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c cfgfile \-t tc_def_ub.py
# simple set default values for U\-Boot testcases
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_default_tc_def_ub_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/default/tc_def_ub.py\fP
.SS src/tc/demo/tc_demo_can_part1.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_board.cfg \-t tc_demo_can_part1.py
# start tc:
# starts a can demo
# For this demo the fipad board in the denx lab is used.
# To test the CAN bus we have in the DENX lab installed a PC, called
# CANPC to which a PEAK CAN adapter is attached, which then is connected
# to the CAN bus the fipad board is also connected.
#
# We use tc_workfd_can.py for testing
#
# We open a new connection to the LabPC, called canm and then we ssh
# to the CANPC, from where we then start candump, while on the console
# connection a cansend was started. So we can read from the canm
# connection, the bytes we send with cansend on the console connection.
#
# If we got the same bytes as we send \-> TC True
# else the TC returns False
#
# Only one cansend call is tested ... room for more.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_can_part1_py\fP\&.
\fIsrc_tc_linux_tc_workfd_can_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_can_part1.py\fP
.SS src/tc/demo/tc_demo_compile_install_test.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-c \-s lab_denx \-c demo \-t tc_demo_compile_install_test.py
# start tc:
# \- compile source tree
# \- install bin on board
# \- call board uboot testcase
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_compile_install_test_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_compile_install_test.py\fP
.SS src/tc/demo/tc_demo_get_ub_code.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_board.cfg \-t tc_demo_get_ub_code.py
# start tc:
# \- rm old u\-boot tree (if there is one)
# \- tc_lab_get_uboot_source.py
# \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_get_ub_code_py\fP\&.
\fIsrc_tc_tc_lab_get_uboot_source_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_get_ub_code.py\fP
.SS src/tc/demo/tc_demo_part1.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c smartweb \-t tc_demo_part1.py
# start tc:
# \- call tc_demo_get_ub_code.py
# \- call tc_demo_compile_install_test.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_part1_py\fP\&.
\fIsrc_tc_demo_tc_demo_get_ub_code_py\fP\&.
\fIsrc_tc_demo_tc_demo_compile_install_test_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_part1.py\fP
.SS src/tc/demo/tc_demo_part2.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c smartweb \-t tc_demo_part2.py
# start tc:
# \- call tc_demo_get_ub_code.py
# \- call tc_demo_compile_install_test.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_part2_py\fP\&.
\fIsrc_tc_demo_tc_demo_get_ub_code_py\fP\&.
\fIsrc_tc_demo_tc_demo_compile_install_test_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_part2.py\fP
.SS src/tc/demo/tc_demo_part3.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c smartweb \-t tc_demo_part3.py
# start tc:
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_demo_tc_demo_part3_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/demo/tc_demo_part3.py\fP
.SS src/tc/lab/denx/tc_lab_denx_connect_to_board.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_connect_to_board.py
# connect to board with connect
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_connect_to_board_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_denx_connect_to_board.py\fP
.SS src/tc/lab/denx/tc_lab_denx_disconnect_from_board.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_disconnect_from_board.py
# disconnect from board in denx vlab
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_disconnect_from_board_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_denx_disconnect_from_board.py\fP
.SS src/tc/lab/denx/tc_lab_denx_get_power_state.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_get_power_state.py
# get the power state of the board, and save it in
# tb.power_state
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_get_power_state_py\fP\&.
.sp
used config variables:
.sp
\fItb_power_state\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_denx_get_power_state.py\fP
.SS src/tc/lab/denx/tc_lab_denx_power.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_power.py
# power on/off the board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_power_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_denx_power.py\fP
.SS src/tc/lab/denx/tc_lab_interactive_get_power_state.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_get_power_state.py
# get the power state of the board through user input,
# and save it in tb.power_state
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_get_power_state_py\fP\&.
.sp
used config variables:
.sp
\fItb_power_state\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_interactive_get_power_state.py\fP
.SS src/tc/lab/denx/tc_lab_interactive_power.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_denx_power.py
# power on/off the board from hand
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_lab_denx_tc_lab_denx_power_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/lab/denx/tc_lab_interactive_power.py\fP
.SS src/tc/linux/ubi/tc_lx_ubi_attach.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_ubi_attach.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_ubi_tc_lx_ubi_attach_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/ubi/tc_lx_ubi_attach.py\fP
.SS src/tc/linux/ubi/tc_lx_ubi_detach.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_ubi_detach.py
# detach ubi device tb.config.tc_ubi_mtd_dev
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_ubi_tc_lx_ubi_detach_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ubi_mtd_dev\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/ubi/tc_lx_ubi_detach.py\fP
.SS src/tc/linux/ubi/tc_lx_ubi_format.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_ubi_format.py
# ubiformat tb.config.tc_ubi_mtd_dev with tb.config.tc_lx_ubi_format_filename
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_ubi_tc_lx_ubi_format_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ubi_mtd_dev\fP\&.
\fItb_config_tc_lx_ubi_format_filename\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/ubi/tc_lx_ubi_format.py\fP
.SS src/tc/linux/ubi/tc_lx_ubi_info.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_ubi_info.py
# ubinfo tb.config.tc_ubi_ubi_dev
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_ubi_tc_lx_ubi_info_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ubi_ubi_dev\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/ubi/tc_lx_ubi_info.py\fP
.SS src/tc/linux/ubi/tc_lx_ubi_tests.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_ubi_tests.py
# \- install mtd utils if needed with tc_lx_mtdutils_install.py
# \- attach ubi device with tc_lx_ubi_attach.py
# \- get info with tc_lx_ubi_info.py
# \- get parameters with tc_lx_get_ubi_parameters.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_ubi_tc_lx_ubi_tests_py\fP\&.
\fIsrc_tc_linux_tc_lx_mtdutils_install_py\fP\&.
\fIsrc_tc_linux_ubi_tc_lx_ubi_attach_py\fP\&.
\fIsrc_tc_linux_ubi_tc_lx_ubi_info_py\fP\&.
\fIsrc_tc_linux_tc_lx_get_ubi_parameters_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/ubi/tc_lx_ubi_tests.py\fP
.SS src/tc/linux/tc_lx_bonnie.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_bonnie.py
# run a bonnie test, if timer tc_workfd_check_tc_time.py timed out
# \- try to install bonnie if not is installed tc_lx_bonnie_install.py
# \- start bonnie on device tb.config.tc_lx_bonnie_dev with
#   size tb.config.tc_lx_bonnie_sz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_bonnie_py\fP\&.
\fIsrc_tc_linux_tc_workfd_check_tc_time_py\fP\&.
\fIsrc_tc_linux_tc_lx_bonnie_install_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_bonnie_dev\fP\&.
\fItb_config_tc_lx_bonnie_sz\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_bonnie.py\fP
.SS src/tc/linux/tc_lx_bonnie_install.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_bonnie_install.py
# get bonnie source and install it
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_bonnie_install_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_bonnie_install.py\fP
.SS src/tc/linux/tc_lx_check_reg_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_check_reg_file.py
# checks if the default values in reg file tb.config.tc_lx_create_reg_file_name
# on the tbot host in tb.workdir have the same values, as the
# registers on the board. Needs devmem2 installed.
# format of the regfile:
# regaddr mask type defval
# ToDo: use the file from the lab host, not the tbot host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_check_reg_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_create_reg_file_name\fP\&.
\fItb_workdir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_check_reg_file.py\fP
.SS src/tc/linux/tc_lx_check_usb_authorized.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_check_usb_authorized.py
# check if usb device tb.config.tc_lx_check_usb_authorized needs authorizing
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_check_usb_authorized_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_check_usb_authorized\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_check_usb_authorized.py\fP
.SS src/tc/linux/tc_lx_cpufreq.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_cpufreq.py
# check if frequencies in tb.config.tc_lx_cpufreq_frequences
# are possible to set with cpufreq\-info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_cpufreq_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_cpufreq_frequences\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_cpufreq.py\fP
.SS src/tc/linux/tc_lx_create_dummy_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_create_dummy_file.py
# create a random dummy file tb.tc_lx_dummy_file_tempfile in linux
# on tb.c_con with bs = tb.tc_lx_dummy_file_bs and
# count = tb.tc_lx_dummy_file_count
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_create_dummy_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_lx_dummy_file_tempfile\fP\&.
\fItb_c_con\fP\&.
\fItb_tc_lx_dummy_file_bs\fP\&.
\fItb_tc_lx_dummy_file_count\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_create_dummy_file.py\fP
.SS src/tc/linux/tc_lx_create_reg_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_create_reg_file.py
# creates a reg file tb.config.tc_lx_create_reg_file_name on the tbot host
# in tb.workdir
# read from tb.config.tc_lx_create_reg_file_start to tb.config.tc_lx_create_reg_file_stop
# and writes the results in the regfile
# format of the regfile:
# regaddr mask type defval
# This reg file can be used as a default file, how the
# registers must be setup, check it with testcase
# tc_lx_check_reg_file.py
# ToDo: use the file from the lab host, not the tbot host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_create_reg_file_py\fP\&.
\fIsrc_tc_linux_tc_lx_check_reg_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_create_reg_file_name\fP\&.
\fItb_workdir\fP\&.
\fItb_config_tc_lx_create_reg_file_start\fP\&.
\fItb_config_tc_lx_create_reg_file_stop\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_create_reg_file.py\fP
.SS src/tc/linux/tc_lx_devmem2_install.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_devmem2_install.py
# get devmem2 source from www.lartmaker.nl/lartware/port/devmem2.c
# and install it
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_devmem2_install_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_devmem2_install.py\fP
.SS src/tc/linux/tc_lx_dmesg_grep.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_dmesg_grep.py
# check if string tb.config.tc_lx_dmesg_grep_name is in dmesg output.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_dmesg_grep_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_dmesg_grep_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_dmesg_grep.py\fP
.SS src/tc/linux/tc_lx_eeprom.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_eeprom.py
# Test an eeprom:
# \- read the content from eeprom @ tb.config.tc_lx_eeprom_tmp_dir
#   with "cat" into tmpfile
# \- check tb.config.tc_lx_eeprom_wp_gpio != \(aqnone\(aq
#   if WP pin works
# \- generate random file with tb.config.tc_lx_eeprom_wp_sz size
# \- write it into eeprom
# \- reread it
# \- compare it with original
# \- restore original eeprom content at end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_eeprom_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_eeprom_tmp_dir\fP\&.
\fItb_config_tc_lx_eeprom_wp_gpio\fP\&.
\fItb_config_tc_lx_eeprom_wp_sz\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_eeprom.py\fP
.SS src/tc/linux/tc_lx_get_ubi_parameters.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_get_ubi_parameters.py
# get ubi parameters of ubi device tb.config.tc_ubi_mtd_dev
# save them into:
# \- tb.config.tc_ubi_max_leb_cnt
# \- tb.config.tc_ubi_min_io_size
# \- tb.config.tc_ubi_leb_size
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_get_ubi_parameters_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ubi_mtd_dev\fP\&.
\fItb_config_tc_ubi_max_leb_cnt\fP\&.
\fItb_config_tc_ubi_min_io_size\fP\&.
\fItb_config_tc_ubi_leb_size\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_get_ubi_parameters.py\fP
.SS src/tc/linux/tc_lx_get_version.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_get_version.py
# get the linux version and create event LINUX_VERSION
# save the linux version in tb.config.tc_return
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_get_version_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_return\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_get_version.py\fP
.SS src/tc/linux/tc_lx_gpio.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_gpio.py
# set in linux gpio tb.config.tc_lx_gpio_nr to direction tb.config.tc_lx_gpio_dir
# and value tb.config.tc_lx_gpio_val
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_gpio_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_gpio_nr\fP\&.
\fItb_config_tc_lx_gpio_dir\fP\&.
\fItb_config_tc_lx_gpio_val\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_gpio.py\fP
.SS src/tc/linux/tc_lx_mount.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_mount.py
# mount device tb.config.tc_lx_mount_dev with fs type tb.config.tc_lx_mount_fs_type
# to tb.config.tc_lx_mount_dir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_mount_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_mount_dev\fP\&.
\fItb_config_tc_lx_mount_fs_type\fP\&.
\fItb_config_tc_lx_mount_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_mount.py\fP
.SS src/tc/linux/tc_lx_mtdutils_install.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_mtdutils_install.py
# check if mtdutils are installed. If not, clone the code with
# git clone git://git.infradead.org/mtd\-utils.git mtd\-utils
# and install it
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_mtdutils_install_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_mtdutils_install.py\fP
.SS src/tc/linux/tc_lx_partition_check.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_partition_check.py
# cp a dummy file into a partiton umount/mount it and
# compare it.
# \- Mount tb.config.tc_lx_mount_dir with tc_lx_mount.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_partition_check_py\fP\&.
\fIsrc_tc_linux_tc_lx_mount_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_mount_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_partition_check.py\fP
.SS src/tc/linux/tc_lx_printenv.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_printenv.py
# simple printenv linux command
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_printenv_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_printenv.py\fP
.SS src/tc/linux/tc_lx_regulator.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_regulator.py
# check if regulators in tb.config.tc_lx_regulator_nrs exist, and have
# the correct microvolts settings.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_regulator_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_regulator_nrs\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_regulator.py\fP
.SS src/tc/linux/tc_lx_trigger_wdt.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_trigger_wdt.py
# simple trigger wdt with command tb.config.tc_lx_trigger_wdt_cmd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_trigger_wdt_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lx_trigger_wdt_cmd\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_trigger_wdt.py\fP
.SS src/tc/linux/tc_lx_uname.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lx_uname.py
# simple linux "uname \-a" command
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_lx_uname_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_lx_uname.py\fP
.SS src/tc/linux/tc_workfd_apply_local_patches.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_apply_local_patches.py
# apply patches from directory tb.config.tc_workfd_apply_local_patches_dir
# with \(aqgit am \-3\(aq to the source in current directory.
# if tb.config.tc_workfd_apply_local_patches_checkpatch_cmd != \(aqnone\(aq
# check the patches with the checkpatch cmd tb.config.tc_workfd_apply_local_patches_checkpatch_cmd
# before applying.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_apply_local_patches_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_apply_local_patches_dir\fP\&.
\fItb_config_tc_workfd_apply_local_patches_checkpatch_cmd\fP\&.
\fItb_config_tc_workfd_apply_local_patches_checkpatch_cmd\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_apply_local_patches.py\fP
.SS src/tc/linux/tc_workfd_apply_patchwork_patches.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_apply_patchwork_patches.py
# apply patchworkpatches from list:
# tb.config.tc_workfd_apply_patchwork_patches_list:
# to source in current directory.
# creates event:
# \- PW_NR: which patchwork number used
# \- PW_CLEAN: is it checkpatch clean
# \- PW_AA: already applied
# \- PW_APPLY: apply it clean to source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_apply_patchwork_patches_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_apply_patchwork_patches_list:\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_apply_patchwork_patches.py\fP
.SS src/tc/linux/tc_workfd_can.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_can.py
#
# minimal can test:
# starts a new connection named tb_canm. This connection runs
# on board/PC which has a can conncetion to the board tbot
# tests, named CAN PC.
# If necessary (tb.config.tc_workfd_can_ssh != \(aqno\(aq), tc connects first
# to ssh (if the CAN PC is not the lab PC). Also if necessary
# (tb.config.tc_workfd_can_su != \(aqno\(aq, switch to superuser on the CAN PC.
#
# Set on the CAN PC, with the "ip" command the bitrate
# tb.config.tc_workfd_can_bitrate for the can device tb.config.tc_workfd_can_dev
# and activate the interface.
#
# Now on the board, go into tb.config.tc_workfd_can_iproute_dir
# (which contains the "ip" command ...
# Set the bitrate with it and activate the can interface.
# Goto into tb.config.tc_workfd_can_util_dir which contains canutils
# Send \(aq123#DEADBEEF\(aq with cansend
#
# check if the CAN PC gets this string.
# End True if this is the case, False else
#
# ToDo:
# \- get rid of tb.config.tc_workfd_can_iproute_dir and tb.config.tc_workfd_can_util_dir
#   (add the commands to rootfs ...)
# \- support different can devices on the CAN PC and board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_can_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_can_bitrate\fP\&.
\fItb_config_tc_workfd_can_dev\fP\&.
\fItb_config_tc_workfd_can_iproute_dir\fP\&.
\fItb_config_tc_workfd_can_util_dir\fP\&.
\fItb_config_tc_workfd_can_iproute_dir\fP\&.
\fItb_config_tc_workfd_can_util_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_can.py\fP
.SS src/tc/linux/tc_workfd_cd_to_dir.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_cd_to_dir.py
# simple cd into directory tb.config.tc_workfd_cd_name
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_cd_to_dir_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_cd_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_cd_to_dir.py\fP
.SS src/tc/linux/tc_workfd_check_cmd_success.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_check_cmd_success.py
# simple check if previous shell command was succesful
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_check_cmd_success_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_check_cmd_success.py\fP
.SS src/tc/linux/tc_workfd_check_if_cmd_exist.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_check_if_cmd_exist.py
# check if a command exists
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_check_if_cmd_exist_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_check_if_cmd_exist.py\fP
.SS src/tc/linux/tc_workfd_check_if_dir_exist.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_check_if_dir_exist.py
# check if a dir in tbot workdir exist
# this tc returns always true, but sets
# tb.config.tc_return True or False, because we may not
# want to end testcase failed, if dir not exists.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_check_if_dir_exist_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_return\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_check_if_dir_exist.py\fP
.SS src/tc/linux/tc_workfd_check_if_file_exist.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_check_if_file_exist.py
# check if a file in tbot workdir exist
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_check_if_file_exist_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_check_if_file_exist.py\fP
.SS src/tc/linux/tc_workfd_check_tc_time.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_check_tc_time.py
# check if time for a special testcase is expired.
# some testcases (like writting in a flash) are not good for
# execute them every day, so give them a timeout. This testcase
# checks, if the testcases is ready for a new run.
# False means time is not expired
# True means time is expired
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_check_tc_time_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_check_tc_time.py\fP
.SS src/tc/linux/tc_workfd_compile_linux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_compile_linux.py
# compile linux:
# \- set toolchain with tc_lab_set_toolchain.py
# \- if tb.config.tc_workfd_compile_linux_clean == \(aqyes\(aq
#   call "make mrproper"
# \- tb.config.tc_workfd_compile_linux_load_addr != \(aqno\(aq
#   add LOAD_ADDR=tb.config.tc_workfd_compile_linux_load_addr to make
# \- make tb.config.tc_workfd_compile_linux_boardname defconfig
# \- make tb.config.tc_workfd_compile_linux_makeoptions tb.config.tc_workfd_compile_linux_make_target
# \- if tb.config.tc_workfd_compile_linux_modules != \(aqnone\(aq
#   compile modules
# \- if tb.config.tc_workfd_compile_linux_dt_name != \(aqnone\(aq
#   compile DTB from list tb.config.tc_workfd_compile_linux_dt_name
# \- if tb.config.tc_workfd_compile_linux_fit_its_file != \(aqno\(aq
#   create FIT image
#   mkimage path: tb.config.tc_workfd_compile_linux_mkimage
#   fit description file: tb.config.tc_workfd_compile_linux_fit_its_file
#   tb.config.tc_workfd_compile_linux_fit_file
# \- if tb.config.tc_workfd_compile_linux_append_dt != \(aqno\(aq
#   append dtb to kernel image
# tb.config.tc_workfd_compile_linux_boardname _defconfig
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_compile_linux_py\fP\&.
\fIsrc_tc_tc_lab_set_toolchain_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_compile_linux_clean\fP\&.
\fItb_config_tc_workfd_compile_linux_load_addr\fP\&.
\fItb_config_tc_workfd_compile_linux_boardname\fP\&.
\fItb_config_tc_workfd_compile_linux_makeoptions\fP\&.
\fItb_config_tc_workfd_compile_linux_make_target\fP\&.
\fItb_config_tc_workfd_compile_linux_modules\fP\&.
\fItb_config_tc_workfd_compile_linux_dt_name\fP\&.
\fItb_config_tc_workfd_compile_linux_dt_name\fP\&.
\fItb_config_tc_workfd_compile_linux_fit_its_file\fP\&.
\fItb_config_tc_workfd_compile_linux_mkimage\fP\&.
\fItb_config_tc_workfd_compile_linux_fit_its_file\fP\&.
\fItb_config_tc_workfd_compile_linux_fit_file\fP\&.
\fItb_config_tc_workfd_compile_linux_append_dt\fP\&.
\fItb_config_tc_workfd_compile_linux_boardname\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_compile_linux.py\fP
.SS src/tc/linux/tc_workfd_connect_with_conmux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_connect_with_conmux.py
# connect to console with conmux
# Never tested !!!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_connect_with_conmux_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_connect_with_conmux.py\fP
.SS src/tc/linux/tc_workfd_connect_with_kermit.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_connect_with_kermit.py
# connect with kermit to serials board console
# \- if tb.config.tc_workfd_connect_with_kermit_ssh != \(aqnone\(aq
#   connect first with ssh to another PC (where kermit is started)
# \- start kermit
# \- if tb.config.tc_workfd_connect_with_kermit_rlogin == \(aqnone\(aq
#   connect with command in tb.config.tc_workfd_connect_with_kermit_rlogin
#   else
#   set line tb.config.kermit_line and speed tb.config.kermit_speed and
#   connect to serial line.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_connect_with_kermit_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_connect_with_kermit_ssh\fP\&.
\fItb_config_tc_workfd_connect_with_kermit_rlogin\fP\&.
\fItb_config_tc_workfd_connect_with_kermit_rlogin\fP\&.
\fItb_config_kermit_line\fP\&.
\fItb_config_kermit_speed\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_connect_with_kermit.py\fP
.SS src/tc/linux/tc_workfd_cp_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_cp_file.py
# simple copy file from tb.tc_workfd_cp_file_a to tb.tc_workfd_cp_file_b
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_cp_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_cp_file_a\fP\&.
\fItb_tc_workfd_cp_file_b\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_cp_file.py\fP
.SS src/tc/linux/tc_workfd_create_ubi_rootfs.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_create_ubi_rootfs.py
# create a ubifs rootfs
# ubi rootfs path: tb.config.tc_workfd_create_ubi_rootfs_path
# ubi parameters:
# tb.config.tc_ubi_min_io_size tb.config.tc_ubi_leb_size tb.config.tc_ubi_max_leb_cnt
# output path: tb.config.tc_workfd_create_ubi_rootfs_target
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_create_ubi_rootfs_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_create_ubi_rootfs_path\fP\&.
\fItb_config_tc_ubi_min_io_size\fP\&.
\fItb_config_tc_ubi_leb_size\fP\&.
\fItb_config_tc_ubi_max_leb_cnt\fP\&.
\fItb_config_tc_workfd_create_ubi_rootfs_target\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_create_ubi_rootfs.py\fP
.SS src/tc/linux/tc_workfd_disconnect_with_kermit.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_connect_with_kermit.py
# disconnect from a kermit connection
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_connect_with_kermit_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_disconnect_with_kermit.py\fP
.SS src/tc/linux/tc_workfd_generate_random_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_generate_random_file.py
# simple create a random file tb.tc_workfd_generate_random_file_name
# with tb.tc_workfd_generate_random_file_length length.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_generate_random_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_generate_random_file_name\fP\&.
\fItb_tc_workfd_generate_random_file_length\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_generate_random_file.py\fP
.SS src/tc/linux/tc_workfd_get_linux_source.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_get_linux_source.py
# get Linux source tb.config.tc_lab_get_linux_source_git_repo with "git clone"
# and go into the source tree. Apply patches if needed with:
# tc_lab_apply_patches.py and tc_workfd_apply_local_patches.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_get_linux_source_py\fP\&.
\fIsrc_tc_tc_lab_apply_patches_py\fP\&.
\fIsrc_tc_linux_tc_workfd_apply_local_patches_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_get_linux_source_git_repo\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_get_linux_source.py\fP
.SS src/tc/linux/tc_workfd_get_list_of_files_in_dir.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_get_list_of_files_in_dir.py
# get a list of files from directory tb.tc_workfd_get_list_of_files_dir
# tb.config.tc_workfd_get_list_of_files_mask
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_get_list_of_files_in_dir_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_get_list_of_files_dir\fP\&.
\fItb_config_tc_workfd_get_list_of_files_mask\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_get_list_of_files_in_dir.py\fP
.SS src/tc/linux/tc_workfd_get_patchwork_number_list.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_get_patchwork_number_list.py
# get a list of patchworknumbers
# which are delegated to specific user
# tb.config.workfd_get_patchwork_number_user
# currently, this testcase reads "http://patchwork.ozlabs.org/project/uboot/list/"
# and filters out the patches, which are for
# tb.config.workfd_get_patchwork_number_user
# It would be better to login and look for the users
# ToDo list, but I did not find out, how to login ...
# ignore patches on blacklist:
# tb.config.tc_workfd_apply_patchwork_patches_blacklist
# also you can set the patch order with:
# tb.config.tc_workfd_get_patchwork_number_list_order
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_get_patchwork_number_list_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_workfd_get_patchwork_number_user\fP\&.
\fItb_config_workfd_get_patchwork_number_user\fP\&.
\fItb_config_tc_workfd_apply_patchwork_patches_blacklist\fP\&.
\fItb_config_tc_workfd_get_patchwork_number_list_order\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_get_patchwork_number_list.py\fP
.SS src/tc/linux/tc_workfd_get_uboot_config_hex.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_get_uboot_config_hex.py
# get a hex parameter from U\-Boot configuration
# Input:
# tb.config.uboot_get_parameter_file_list: list of files, where TC searches
#   for the define
# tb.uboot_config_option: config option which get searched
#
# return value:
# TC ends True, if hex value found, else False
# tb.config_result: founded hex value, else \(aqundef\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_get_uboot_config_hex_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_uboot_get_parameter_file_list:\fP\&.
\fItb_uboot_config_option:\fP\&.
\fItb_config_result:\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_get_uboot_config_hex.py\fP
.SS src/tc/linux/tc_workfd_get_uboot_config_string.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_get_uboot_config_string.py
# get a string parameter from U\-Boot configuration
# Input:
# tb.config.uboot_get_parameter_file_list: list of files, where TC searches
#   for the define
# tb.uboot_config_option: config option which get searched
#
# return value:
# TC ends True, if string value found, else False
# tb.config_result: founded string value, else \(aqundef\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_get_uboot_config_string_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_uboot_get_parameter_file_list:\fP\&.
\fItb_uboot_config_option:\fP\&.
\fItb_config_result:\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_get_uboot_config_string.py\fP
.SS src/tc/linux/tc_workfd_goto_lab_source_dir.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_goto_lab_source_dir.py
# switch into lab PC source directory tb.config.tc_lab_source_dir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_goto_lab_source_dir_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_source_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_goto_lab_source_dir.py\fP
.SS src/tc/linux/tc_workfd_goto_linux_code.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_goto_linux_code.py
# switch into linux source tb.config.tc_lab_source_dir + "/linux\-" + tb.config.boardlabname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_goto_linux_code_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_source_dir\fP\&.
\fItb_config_boardlabname\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_goto_linux_code.py\fP
.SS src/tc/linux/tc_workfd_goto_tbot_workdir.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_goto_tbot_workdir.py
# go into the tbot work dir tb.config.tc_workfd_work_dir
# if not exist, create it
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_goto_tbot_workdir_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_work_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_goto_tbot_workdir.py\fP
.SS src/tc/linux/tc_workfd_goto_uboot_code.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_goto_uboot_code.py
# switch into U\-Boot source tb.config.tc_lab_source_dir + "/u\-boot\-" + tb.config.boardlabname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_goto_uboot_code_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_source_dir\fP\&.
\fItb_config_boardlabname\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_goto_uboot_code.py\fP
.SS src/tc/linux/tc_workfd_grep.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_grep.py
# search string tb.tc_workfd_grep_string in file tb.tc_workfd_grep_file
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_grep_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_grep_string\fP\&.
\fItb_tc_workfd_grep_file\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_grep.py\fP
.SS src/tc/linux/tc_workfd_hdparm.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_hdparm.py
# make a minimal hdparm check
# call hdparm \-t tb.config.tc_workfd_hdparm_dev
# and check if read speed is greater than tb.config.tc_workfd_hdparm_min
# It is possible to add a PATH tb.config.tc_workfd_hdparm_path
# where hdparm is installed
# Testcase fails if readen speed is <= tb.config.tc_workfd_hdparm_min
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_hdparm_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_hdparm_dev\fP\&.
\fItb_config_tc_workfd_hdparm_min\fP\&.
\fItb_config_tc_workfd_hdparm_path\fP\&.
\fItb_config_tc_workfd_hdparm_min\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_hdparm.py\fP
.SS src/tc/linux/tc_workfd_insmod.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_insmod.py
# insmod module tb.tc_workfd_insmod_module with
# module path tb.tc_workfd_insmod_mpath and
# tb.tc_workfd_insmod_module_path
# check if the strings in list tb.tc_workfd_insmod_module_checks
# come back when inserting the module.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_insmod_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_insmod_module\fP\&.
\fItb_tc_workfd_insmod_mpath\fP\&.
\fItb_tc_workfd_insmod_module_path\fP\&.
\fItb_tc_workfd_insmod_module_checks\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_insmod.py\fP
.SS src/tc/linux/tc_workfd_iperf.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_iperf.py
# make a minimal iperf check
# starts an iperf server on tb.tc_workfd_c_sr connection
#   with ip addr tb.tc_workfd_iperf_sip
# starts an iperf "slave" on tb.tc_workfd_c_sl
# waiting for the first result of iperf measure and
# check if the resulting speed is bigger then
# tb.tc_workfd_iperf_minval
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_iperf_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_c_sr\fP\&.
\fItb_tc_workfd_iperf_sip\fP\&.
\fItb_tc_workfd_c_sl\fP\&.
\fItb_tc_workfd_iperf_minval\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_iperf.py\fP
.SS src/tc/linux/tc_workfd_md5sum.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_md5sum.py
# calculate md5sum of file tb.tc_workfd_md5sum_name , and store it in
# tb.tc_workfd_md5sum_sum
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_md5sum_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_md5sum_name\fP\&.
\fItb_tc_workfd_md5sum_sum\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_md5sum.py\fP
.SS src/tc/linux/tc_workfd_rm_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_rm_file.py
# simple rm directory tb.config.tc_workfd_rm_file_name on the lab
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_rm_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_workfd_rm_file_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_rm_file.py\fP
.SS src/tc/linux/tc_workfd_rm_linux_code.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_rm_linux_code.py
# rm linux source tb.config.tc_lab_source_dir + \(aq/linux\-\(aq + tb.config.boardlabname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_rm_linux_code_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_source_dir\fP\&.
\fItb_config_boardlabname\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_rm_linux_code.py\fP
.SS src/tc/linux/tc_workfd_rm_uboot_code.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_rm_uboot_code.py
# rm U\-Boot source tb.config.tc_lab_source_dir + \(aq/u\-boot\-\(aq + tb.config.boardlabname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_rm_uboot_code_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_lab_source_dir\fP\&.
\fItb_config_boardlabname\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_rm_uboot_code.py\fP
.SS src/tc/linux/tc_workfd_ssh.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_ssh.py
# login with ssh to tb.workfd_ssh_cmd and set new ssh prompt
# tb.config.workfd_ssh_cmd_prompt
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_ssh_py\fP\&.
.sp
used config variables:
.sp
\fItb_workfd_ssh_cmd\fP\&.
\fItb_config_workfd_ssh_cmd_prompt\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_ssh.py\fP
.SS src/tc/linux/tc_workfd_sudo_cp_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_sudo_cp_file.py
# simple copy file from tb.tc_workfd_cp_file_a to tb.tc_workfd_cp_file_b
# with sudo rights
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_sudo_cp_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_cp_file_a\fP\&.
\fItb_tc_workfd_cp_file_b\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_sudo_cp_file.py\fP
.SS src/tc/linux/tc_workfd_switch_su.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_switch_su.py
# switch to superuser
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_linux_tc_workfd_switch_su_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/linux/tc_workfd_switch_su.py\fP
.SS src/tc/uboot/duts/tc_ub_basic.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_basic.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/02_UBootBasic.tc;h=5503cc6c716d2748732d30d63b0801e651fe1706;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_basic_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/02_UBootBasic.tc;h=5503cc6c716d2748732d30d63b0801e651fe1706;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_basic.py\fP
.SS src/tc/uboot/duts/tc_ub_bdinfo.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_bdinfo.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootBdinfo.tc;h=aa794a93ac5c8d2c3aea4aa5d02433ca2ee0f010;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_bdinfo_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootBdinfo.tc;h=aa794a93ac5c8d2c3aea4aa5d02433ca2ee0f010;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_bdinfo.py\fP
.SS src/tc/uboot/duts/tc_ub_boot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_boot.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootBoot.tc;h=f679ff09cdb1e1393829c32dc5aa5cf299e9af07;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_boot_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootBoot.tc;h=f679ff09cdb1e1393829c32dc5aa5cf299e9af07;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_boot.py\fP
.SS src/tc/uboot/duts/tc_ub_coninfo.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_coninfo.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootConinfo.tc;h=2d028f74ba791343b8a70a97885eabe8b5944017;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_coninfo_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootConinfo.tc;h=2d028f74ba791343b8a70a97885eabe8b5944017;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_coninfo.py\fP
.SS src/tc/uboot/duts/tc_ub_date.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_date.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootDate.tc;h=03b7d53fd93bd61381db4095a4bff58b1d1efff7;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_date_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootDate.tc;h=03b7d53fd93bd61381db4095a4bff58b1d1efff7;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_date.py\fP
.SS src/tc/uboot/duts/tc_ub_diskboothelp.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_diskboothelp.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootIde.tc;h=03c2a05b75c6f9f6fc257fa84a2220f965567699;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_diskboothelp_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootIde.tc;h=03c2a05b75c6f9f6fc257fa84a2220f965567699;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_diskboothelp.py\fP
.SS src/tc/uboot/duts/tc_ub_download.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_download.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootCmdGroupDownload.tc;h=8e58d53add90b680ef7a1300894d2392f90d9824;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_download_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootCmdGroupDownload.tc;h=8e58d53add90b680ef7a1300894d2392f90d9824;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_download.py\fP
.SS src/tc/uboot/duts/tc_ub_dtt.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_dtt.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootDtt.tc;h=e420c7b45cd73b00465d69f969039222868f4cc7;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_dtt_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootDtt.tc;h=e420c7b45cd73b00465d69f969039222868f4cc7;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_dtt.py\fP
.SS src/tc/uboot/duts/tc_ub_environment.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_environment.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootEnvironment.tc;h=18d235f427e3efe9e6a04f870a3c5426d719ec58;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_environment_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootEnvironment.tc;h=18d235f427e3efe9e6a04f870a3c5426d719ec58;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_environment.py\fP
.SS src/tc/uboot/duts/tc_ub_flash.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_flash.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootFlashTest.tc;h=6eea72c8e9f3f4739a76ff59bb2e9a7c693aedd9;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_flash_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootFlashTest.tc;h=6eea72c8e9f3f4739a76ff59bb2e9a7c693aedd9;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_flash.py\fP
.SS src/tc/uboot/duts/tc_ub_flinfo.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_flinfo.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootFlinfo.tc;h=f5b728258250211d86dc9c6a9208639d8542b845;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_flinfo_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootFlinfo.tc;h=f5b728258250211d86dc9c6a9208639d8542b845;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_flinfo.py\fP
.SS src/tc/uboot/duts/tc_ub_i2c_help.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_i2c_help.py
# simple prints "help i2c" cmd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_i2c_help_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_i2c_help.py\fP
.SS src/tc/uboot/duts/tc_ub_ide.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ide.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootIde.tc;h=03c2a05b75c6f9f6fc257fa84a2220f965567699;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_ide_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/15_UBootIde.tc;h=03c2a05b75c6f9f6fc257fa84a2220f965567699;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_ide.py\fP
.SS src/tc/uboot/duts/tc_ub_memory.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_memory.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootMemory.tc;h=f5fb055499db17c322859215ab489cefb063ac47;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_memory_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootMemory.tc;h=f5fb055499db17c322859215ab489cefb063ac47;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_memory.py\fP
.SS src/tc/uboot/duts/tc_ub_run.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_run.py
# convert duts tests from:
# http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootRun.tc;h=44f8a0a0de256afdd95b5ec20d1d4570373aeb7d;hb=101ddd5dbd547d5046363358d560149d873b238a
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_run_py\fP\&.
.sp
links:
.sp
\fI\%http://git.denx.de/?p=duts.git;a=blob;f=testsystems/dulg/testcases/10_UBootRun.tc;h=44f8a0a0de256afdd95b5ec20d1d4570373aeb7d;hb=101ddd5dbd547d5046363358d560149d873b238a\fP
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_run.py\fP
.SS src/tc/uboot/duts/tc_ub_start_all_duts.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_start_all_duts.py
# start all DUTS tests
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_duts_tc_ub_start_all_duts_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/duts/tc_ub_start_all_duts.py\fP
.SS src/tc/uboot/tc_ub_aristainetos2_ubi.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# tbot.py \-s lab_denx \-c aristainetos2 \-t tc_ub_aristainetos2_ubi.py
# ubi testcases for the aristainetos2 board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_aristainetos2_ubi_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_aristainetos2_ubi.py\fP
.SS src/tc/uboot/tc_ub_check_reg_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_check_reg_file.py
# checks if the default values in reg file tb.tc_ub_create_reg_file_name
# on the tbot host in tb.workdir have the same values, as the
# registers on the board
# format of the regfile:
# regaddr mask type defval
# ToDo: use the file from the lab host, not the tbot host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_check_reg_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_ub_create_reg_file_name\fP\&.
\fItb_workdir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_check_reg_file.py\fP
.SS src/tc/uboot/tc_ub_check_version.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_check_version.py
# check if the current running U\-Boot vers == tb.uboot_vers
# and SPL vers == tb.spl_vers
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_check_version_py\fP\&.
.sp
used config variables:
.sp
\fItb_uboot_vers\fP\&.
\fItb_spl_vers\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_check_version.py\fP
.SS src/tc/uboot/tc_ub_cmp.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_cmp.py
# \- compare 2 the contents of tb.tc_ub_cmp_addr1 with tb.tc_ub_cmp_addr2
# bytes tb.tc_ub_cmp_len length
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_cmp_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_ub_cmp_addr1\fP\&.
\fItb_tc_ub_cmp_addr2\fP\&.
\fItb_tc_ub_cmp_len\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_cmp.py\fP
.SS src/tc/uboot/tc_ub_create_reg_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_create_reg_file.py
# creates a reg file tb.tc_ub_create_reg_file_name on the tbot host
# in tb.workdir
# read from tb.tc_ub_create_reg_file_start to tb.tc_ub_create_reg_file_stop
# and writes the results in the regfile tb.tc_ub_create_reg_file_name
# format of the regfile:
# regaddr mask type defval
# This reg file can be used as a default file, how the
# registers must be setup, check it with testcase
# tc_ub_check_reg_file.py
# ToDo: use the file from the lab host, not the tbot host
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_create_reg_file_py\fP\&.
\fIsrc_tc_uboot_tc_ub_check_reg_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_ub_create_reg_file_name\fP\&.
\fItb_workdir\fP\&.
\fItb_tc_ub_create_reg_file_start\fP\&.
\fItb_tc_ub_create_reg_file_stop\fP\&.
\fItb_tc_ub_create_reg_file_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_create_reg_file.py\fP
.SS src/tc/uboot/tc_ub_dfu.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_dfu.py
# test dfu
# \- use dfu\-util in tb.config.tc_ub_dfu_dfu_util_path
# \- upload file tb.config.tc_ub_dfu_dfu_util_alt_setting to
#   tb.config.tc_ub_dfu_dfu_util_downloadfile
# \- download it back to the board
# \- upload it again
# \- and compare the two files
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_dfu_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_dfu_dfu_util_path\fP\&.
\fItb_config_tc_ub_dfu_dfu_util_alt_setting\fP\&.
\fItb_config_tc_ub_dfu_dfu_util_downloadfile\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_dfu.py\fP
.SS src/tc/uboot/tc_ub_dfu_random.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_dfu_random.py
# test a U\-Boot dfu alt setting tb.config.tc_ub_dfu_dfu_util_alt_setting
# Therefore write a random file with size tb.config.tc_ub_dfu_rand_size
# to it, reread it and compare it. TC fails if files differ
# (If readen file is longer, this is no error!)
#
# If dfu\-util is not installed on the lab PC, set
# tb.config.tc_ub_dfu_dfu_util_ssh for connecting with ssh to a PC
# which have it installed, and a USB cable connected to the board.
# Set tb.config.tc_ub_dfu_dfu_util_path to the path of dfu\-util, if
# you have a self compiled version of it.
# Set tb.config.tc_ub_dfu_rand_ubcmd for the executed command on
# U\-Boot shell for getting into DFU mode
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_dfu_random_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_dfu_dfu_util_alt_setting\fP\&.
\fItb_config_tc_ub_dfu_rand_size\fP\&.
\fItb_config_tc_ub_dfu_dfu_util_ssh\fP\&.
\fItb_config_tc_ub_dfu_dfu_util_path\fP\&.
\fItb_config_tc_ub_dfu_rand_ubcmd\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_dfu_random.py\fP
.SS src/tc/uboot/tc_ub_dfu_random_default.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_dfu_random_default.py
# test a U\-Boot dfu alt setting tb.config.tc_ub_dfu_dfu_util_alt_setting
# with reading / writing different sizes
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_dfu_random_default_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_dfu_dfu_util_alt_setting\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_dfu_random_default.py\fP
.SS src/tc/uboot/tc_ub_get_filesize.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_get_filesize.py
# simple get the content of U\-Boot env variable filesize
# and store it in tb.ub_filesize
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_get_filesize_py\fP\&.
.sp
used config variables:
.sp
\fItb_ub_filesize\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_get_filesize.py\fP
.SS src/tc/uboot/tc_ub_get_version.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_get_version.py
# get the U\-Boot and/or SPL version from a binary
# and save it in tb.uboot_vers or tb.spl_vers
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_get_version_py\fP\&.
.sp
used config variables:
.sp
\fItb_uboot_vers\fP\&.
\fItb_spl_vers\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_get_version.py\fP
.SS src/tc/uboot/tc_ub_help.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_help.py
# \- test U\-Boots help cmd
#   may we add a list as parameter, so we can adapt it board
#   specific.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_help_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_help.py\fP
.SS src/tc/uboot/tc_ub_load_board_env.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_load_board_env.py
# load U\-Boot Environment for the board tb.config.tftpboardname
# tb.config.ub_load_board_env_addr and tb.config.ub_load_board_env_subdir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_load_board_env_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tftpboardname\fP\&.
\fItb_config_ub_load_board_env_addr\fP\&.
\fItb_config_ub_load_board_env_subdir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_load_board_env.py\fP
.SS src/tc/uboot/tc_ub_reset.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_reset.py
# simple U\-Boot reset command.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_reset_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_reset.py\fP
.SS src/tc/uboot/tc_ub_setenv.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_setenv.py
# set U\-Boot Environmentvariable tb.config.setenv_name with value
# tb.config.setenv_value
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_setenv_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_setenv_name\fP\&.
\fItb_config_setenv_value\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_setenv.py\fP
.SS src/tc/uboot/tc_ub_test_py.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_test_py.py
# call test/py from u\-boot source
# \- disconnect console
# \- call test/py
# \- connect back to console
# test/py hookscript directory:
# tb.config.tc_ub_test_py_hook_script_path
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_test_py_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_test_py_hook_script_path\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_test_py.py\fP
.SS src/tc/uboot/tc_ub_tftp_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_tftp_file.py
# load file tb.config.tc_ub_tftp_file_name to tb.config.tc_ub_tftp_file_addr
# with tftp command in uboot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_tftp_file_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_tftp_file_name\fP\&.
\fItb_config_tc_ub_tftp_file_addr\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_tftp_file.py\fP
.SS src/tc/uboot/tc_ub_ubi_check_volume.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_check_volume.py
# \- checks if ubi volume tb.config.tc_ub_ubi_load_name exists
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_check_volume_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubi_load_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_check_volume.py\fP
.SS src/tc/uboot/tc_ub_ubi_create_volume.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_create_volume.py
# \- create ubi volume tb.config.tc_ub_ubi_create_vol_name with size
# tb.config.tc_ub_ubi_create_vol_sz
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_create_volume_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubi_create_vol_name\fP\&.
\fItb_config_tc_ub_ubi_create_vol_sz\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_create_volume.py\fP
.SS src/tc/uboot/tc_ub_ubi_erase.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_erase.py
# \- erase an ubi device
#   execute U\-Boot Env tbot_ubi_erase
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_erase_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_erase.py\fP
.SS src/tc/uboot/tc_ub_ubi_info.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_info.py
# \- simple print ubi info
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_info_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_info.py\fP
.SS src/tc/uboot/tc_ub_ubi_prepare.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_prepare.py
# \- ubi prepare
#   execute "ubi part" ith tb.config.tc_ub_ubi_prep_partname
#   if tb.config.tc_ub_ubi_prep_offset != \(aqnone\(aq
#   with offset tb.config.tc_ub_ubi_prep_offset
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_prepare_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubi_prep_partname\fP\&.
\fItb_config_tc_ub_ubi_prep_offset\fP\&.
\fItb_config_tc_ub_ubi_prep_offset\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_prepare.py\fP
.SS src/tc/uboot/tc_ub_ubi_read.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_read.py
# \- read ubi volume tb.config.tc_ub_ubi_prep_offset to tb.tc_ub_ubi_read_addr
# with len tb.tc_ub_ubi_read_len
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_read_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubi_prep_offset\fP\&.
\fItb_tc_ub_ubi_read_addr\fP\&.
\fItb_tc_ub_ubi_read_len\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_read.py\fP
.SS src/tc/uboot/tc_ub_ubi_write.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubi_write.py
# \- write image @ tb.config.tc_ub_ubi_write_addr to ubi volume
#   tb.config.tc_ub_ubi_write_vol_name with len tb.config.tc_ub_ubi_write_len
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubi_write_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubi_write_addr\fP\&.
\fItb_config_tc_ub_ubi_write_vol_name\fP\&.
\fItb_config_tc_ub_ubi_write_len\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubi_write.py\fP
.SS src/tc/uboot/tc_ub_ubifs_ls.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubifs_ls.py
# \- ls ubifs tb.config.tc_ub_ubifs_ls_dir
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubifs_ls_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubifs_ls_dir\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubifs_ls.py\fP
.SS src/tc/uboot/tc_ub_ubifs_mount.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_ubifs_mount.py
# \- mount ubifs tb.config.tc_ub_ubifs_volume_name
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_ubifs_mount_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_tc_ub_ubifs_volume_name\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_ubifs_mount.py\fP
.SS src/tc/uboot/tc_ub_upd_spl.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_upd_spl.py
# update new spl to board
# steps:
# \- load tbot u\-boot env vars
# \- execute "run tbot_upd_spl"
# \- execute "run tbot_cmp_spl"
# \- reset board
# \- get u\-boot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_upd_spl_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_upd_spl.py\fP
.SS src/tc/uboot/tc_ub_upd_uboot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_upd_uboot.py
# update new uboot to board
# steps:
# \- load tbot u\-boot env vars
# \- execute "run tbot_upd_uboot"
# \- execute "run tbot_cmp_uboot"
# \- reset board
# \- get u\-boot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_ub_upd_uboot_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_ub_upd_uboot.py\fP
.SS src/tc/uboot/tc_uboot_check_kconfig.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c config/tbot_uboot_kconfig_check.cfg \-t tc_uboot_check_kconfig.py
# check for all boards, if a patch changes the u\-boot binary
# If U\-boot binary changed by the patch this testcase fails.
# use this testcase, if you for example move a config option
# into Kconfig. As we need reproducable builds, we need to
# patch U\-Boot with tb.tc_uboot_check_kconfig_preparepatch
# \- rm U\-Boot code with tc_workfd_rm_uboot_code.py
# \- get U\-Boot code with tc_lab_get_uboot_source.py
# \- set SOURCE_DATE_EPOCH=0 to get reproducible builds
# \- get rid of local version ToDo: find a way to disable CONFIG_LOCALVERSION_AUTO
# \- if tb.tc_uboot_check_kconfig_read_sumfile is != \(aqnone\(aq
#     read a list of boards and md5sums from the file in
#     tb.tc_uboot_check_kconfig_read_sumfile
#   else
#   \- create a list of boards (all defconfigs)
#   \- do for all boards:
#     \- get architecture and set toolchain
#     \- compile U\-Boot and calculate md5sum
#       with tc_workfd_compile_uboot.py and tc_workfd_md5sum.py
#     \- if tb.tc_uboot_check_kconfig_create_sumfile != \(aqnone\(aq
#       save the board md5sum lists in the file
#       tb.tc_uboot_check_kconfig_create_sumfile
#       you can use this now as a reference, so no need
#       to calculate always for all boards the md5sums
#       \-> saves a lot of time!
#
# \- apply patch(es) with tc_workfd_apply_patches.py
# \- do for all boards:
#   \- compile U\-Boot again (patched version)
#   \- calculate md5sum again
#   \- calculate md5sums
#   \- check if they are the same
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_uboot_check_kconfig_py\fP\&.
\fIsrc_tc_linux_tc_workfd_rm_uboot_code_py\fP\&.
\fIsrc_tc_tc_lab_get_uboot_source_py\fP\&.
\fIsrc_tc_tc_workfd_compile_uboot_py\fP\&.
\fIsrc_tc_linux_tc_workfd_md5sum_py\fP\&.
\fIsrc_tc_tc_workfd_apply_patches_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_uboot_check_kconfig_preparepatch\fP\&.
\fItb_tc_uboot_check_kconfig_read_sumfile\fP\&.
\fItb_tc_uboot_check_kconfig_read_sumfile\fP\&.
\fItb_tc_uboot_check_kconfig_create_sumfile\fP\&.
\fItb_tc_uboot_check_kconfig_create_sumfile\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_uboot_check_kconfig.py\fP
.SS src/tc/uboot/tc_uboot_get_arch.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c config/tbot_dxr2_uboot_kconfig_check.cfg \-t tc_uboot_get_arch.py
# get architecture from u\-boot config
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_uboot_tc_uboot_get_arch_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/uboot/tc_uboot_get_arch.py\fP
.SS src/tc/tc_board_git_bisect.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot_tqm5200s.cfg \-t tc_board_git_bisect.py
# get a source code with tc tb.config.board_git_bisect_get_source_tc
# and start a "git bisect" session
# current commit is bad
# good commit id is defined through tb.config.board_git_bisect_good_commit
# tc for testing good or bad is tb.config.board_git_bisect_call_tc
# if you have some local patches, which needs to be applied
# each git bisect step, set tb.config.board_git_bisect_patches
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_board_git_bisect_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_board_git_bisect_get_source_tc\fP\&.
\fItb_config_board_git_bisect_good_commit\fP\&.
\fItb_config_board_git_bisect_call_tc\fP\&.
\fItb_config_board_git_bisect_patches\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_board_git_bisect.py\fP
.SS src/tc/tc_lab_apply_patches.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_apply_patches.py
# apply patches to source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_apply_patches_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_apply_patches.py\fP
.SS src/tc/tc_lab_compile_uboot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_compile_uboot.py
# compile u\-boot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_compile_uboot_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_compile_uboot.py\fP
.SS src/tc/tc_lab_cp_file.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_cp_file.py
# simple copy  file from arg.get(\(aqs\(aq)
# to arg.get(\(aqt\(aq) on the channel arg.get(\(aqch\(aq)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_cp_file_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_cp_file.py\fP
.SS src/tc/tc_lab_get_uboot_source.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_get_uboot_source.py
# get U\-Boot source
# and go into the source tree
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_get_uboot_source_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_get_uboot_source.py\fP
.SS src/tc/tc_lab_poweroff.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_poweroff.py
# simple power off the board
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_poweroff_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_poweroff.py\fP
.SS src/tc/tc_lab_rm_dir.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_rm_dir.py
# simple rm a directory on the lab
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_rm_dir_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_rm_dir.py\fP
.SS src/tc/tc_lab_set_toolchain.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_set_toolchain.py
# set the toolchain
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_set_toolchain_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_lab_set_toolchain.py\fP
.SS src/tc/tc_ub_boot_linux.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_ub_boot_linux.py
# \- load u\-boot environment with testcase "tc_ub_load_board_env.py"
# \- execute u\-boot cmd tb.config.ub_boot_linux_cmd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_ub_boot_linux_py\fP\&.
.sp
used config variables:
.sp
\fItb_config_ub_boot_linux_cmd\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_ub_boot_linux.py\fP
.SS src/tc/tc_workfd_apply_patches.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_lab_apply_patches.py
# apply patches to source
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_lab_apply_patches_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_workfd_apply_patches.py\fP
.SS src/tc/tc_workfd_compile_uboot.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_compile_uboot.py
# compile u\-boot
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_workfd_compile_uboot_py\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_workfd_compile_uboot.py\fP
.SS src/tc/tc_workfd_set_toolchain.py
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# start with
# python2.7 src/common/tbot.py \-c tbot.cfg \-t tc_workfd_set_toolchain.py
# set the toolchain, dependend on the architecture setting in
# tb.tc_workfd_set_toolchain_arch
# supported toolchains defined in
# tb.tc_workfd_set_toolchain_t_p and tb.tc_workfd_set_toolchain_cr_co
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
used Testcases:
.sp
\fIsrc_tc_tc_workfd_set_toolchain_py\fP\&.
.sp
used config variables:
.sp
\fItb_tc_workfd_set_toolchain_arch\fP\&.
\fItb_tc_workfd_set_toolchain_t_p\fP\&.
\fItb_tc_workfd_set_toolchain_cr_co\fP\&.
.sp
\fI\%https://github.com/hsdenx/tbot/tree/master/src/tc/tc_workfd_set_toolchain.py\fP
.SH DOCUMENTATION OF ALL VARIABLES
.SS debug
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
debug = False
.ft P
.fi
.UNINDENT
.UNINDENT
.SS debugstatus
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
debugstatus = False
.ft P
.fi
.UNINDENT
.UNINDENT
.SS uboot_strings
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uboot_strings = [\(aqAutobooting in\(aq, \(aqnoautoboot\(aq,  \(aqautoboot\(aq, \(aqEOF\(aq, \(aqRomBOOT\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS term_line_length
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
term_line_length = \(aq200\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS wdt_timeout
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
wdt_timeout = \(aq120\(aq # wdt timeout after 2 minutes
.ft P
.fi
.UNINDENT
.UNINDENT
.SS state_linux_timeout
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
state_linux_timeout = 4
.ft P
.fi
.UNINDENT
.UNINDENT
.SS labsshprompt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
labsshprompt = \(aq$ \(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_return
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_return = True
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_check_if_cmd_exist_cmdname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_check_if_cmd_exist_cmdname = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS setenv_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
setenv_name = \(aqtralala\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS setenv_value
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
setenv_value = \(aqhulalahups\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_boot_linux_load_env
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_boot_linux_load_env = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_mount_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_mount_dev = \(aq/dev/sda1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_mount_fs_type
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_mount_fs_type = \(aqext4\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_mount_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_mount_dir = \(aq/home/hs/mnt\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_bonnie_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_bonnie_dev = tc_lx_mount_dev
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_bonnie_sz
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_bonnie_sz = \(aq968\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ub_load_board_env_addr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ub_load_board_env_addr = \(aq0x81000000\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ub_load_board_env_subdir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ub_load_board_env_subdir = \(aqtbot\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS ub_boot_linux_cmd
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ub_boot_linux_cmd = \(aqrun tbot_boot_linux\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_compile_uboot_boardname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_compile_uboot_boardname = \(aqconfig.boardname\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_compile_uboot_makeoptions
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_compile_uboot_makeoptions = \(aq\-j4\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS do_connect_to_board
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
do_connect_to_board = True
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_compile_uboot_export_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_compile_uboot_export_path = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tftpboardname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tftpboardname = \(aqconfig.boardname\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS boardlabname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
boardlabname = \(aqconfig.boardname\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS boardlabpowername
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
boardlabpowername = \(aqconfig.boardname\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_dfu_dfu_util_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_dfu_dfu_util_path = "/home/hs/zug/dfu\-util"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_dfu_dfu_util_alt_setting
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_dfu_dfu_util_alt_setting = "Linux"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_source_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_source_dir = "/work/hs/tbot"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_uboot_source_git_repo
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_uboot_source_git_repo = "/home/git/u\-boot.git"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_uboot_source_git_branch
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_uboot_source_git_branch = "master"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_toolchain_rev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_toolchain_rev = "5.4"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_toolchain_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_toolchain_name = "armv5te"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_load_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_load_name = "kernel"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_prep_partname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_prep_partname = "ubi"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_prep_offset
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_prep_offset = "none"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_load_addr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_load_addr = "14000000"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_create_vol_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_create_vol_name = \(aqconfig.tc_ub_ubi_load_name\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_create_vol_sz
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_create_vol_sz = "600000"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_write_len
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_write_len = \(aq0xc00000\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_write_addr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_write_addr = \(aqconfig.tc_ub_ubi_load_addr\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubi_write_vol_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubi_write_vol_name = \(aqconfig.tc_ub_ubi_create_vol_name\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubifs_volume_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubifs_volume_name = \(aqubi:rootfs\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_ubifs_ls_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_ubifs_ls_dir = \(aq/\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_gpio_nr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_gpio_nr = \(aq69\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_gpio_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_gpio_dir = \(aqout\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_gpio_val
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_gpio_val = \(aq1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_file = \(aq/sys/class/i2c\-dev/i2c\-0/device/0\-0050/eeprom\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_tmp_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_tmp_dir = \(aqconfig.lab_tmp_dir\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_wp_gpio
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_wp_gpio = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_wp_val
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_wp_val = "0"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_wp_sz
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_wp_sz = "4096"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_wp_obs
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_wp_obs = "32"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_eeprom_wp_wc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_eeprom_wp_wc = "128"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_cpufreq_frequences
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_cpufreq_frequences = [\(aq294\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_check_usb_authorized
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_check_usb_authorized = \(aqusb 1\-1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_work_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_work_dir = "/work/tbot"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_check_if_file_exists_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_check_if_file_exists_name = "bonnie++\-1.03e.tgz"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_check_if_dir_exists_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_check_if_dir_exists_name = "mtd\-utils"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_dmesg_grep_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_dmesg_grep_name = "zigbee"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_readreg_mask
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_readreg_mask = "0x000000ff"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_readreg_type
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_readreg_type = "w"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_create_reg_file_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_create_reg_file_name = "pinmux.reg"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_create_reg_file_start
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_create_reg_file_start = "0x44e10800"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_create_reg_file_stop
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_create_reg_file_stop = "0x44e10a34"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_regulator_nrs
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_regulator_nrs = [\(aq0 regulator\-dummy \-\(aq, \(aq1 hsusb1_vbus 5000000\(aq,
\(aq2 vmmc 3300000\(aq, \(aq3 pbias_mmc_omap2430 3000000\(aq,
\(aq4 DCDC1 1200000\(aq, \(aq5 DCDC2 3300000\(aq, \(aq6 DCDC3 1800000\(aq,
\(aq7 LDO1 1800000\(aq, \(aq8 LDO2 3300000\(aq]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS board_has_debugger
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
board_has_debugger = 0
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_cmd
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_cmd = \(aqtelnet bdi6\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_prompt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_prompt = \(aqBDI>\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_era
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_era = \(aqera\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_prog
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_prog = \(aqprog 0xfc000000\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_file = \(aq/tftpboot/tqm5200s/tbot/u\-boot.bin\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS lab_bdi_upd_uboot_bdi_run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lab_bdi_upd_uboot_bdi_run = \(aqres run\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS board_git_bisect_get_source_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
board_git_bisect_get_source_tc = \(aqtc_lab_get_uboot_source.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS board_git_bisect_call_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
board_git_bisect_call_tc = \(aqtc_board_tqm5200s_ub_comp_install.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS board_git_bisect_good_commit
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
board_git_bisect_good_commit = \(aqf9860cf\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS board_git_bisect_patches
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
board_git_bisect_patches = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_apply_patches_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_apply_patches_dir =  \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_cmd_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_cmd_path = "/work/tbot/mtd\-utils"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_mtd_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_mtd_dev = "/dev/mtd4"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_ubi_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_ubi_dev = "/dev/ubi0"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_min_io_size
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_min_io_size = "1024"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_max_leb_cnt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_max_leb_cnt = "100"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_leb_size
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_leb_size = "126976"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ubi_vid_hdr_offset
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ubi_vid_hdr_offset = "default"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_ubi_format_filename
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_ubi_format_filename = "/home/hs/ccu1/ecl\-image\-usbc.ubi"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_patchwork_patches_list
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_patchwork_patches_list = []
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_patchwork_patches_list_hand
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_patchwork_patches_list_hand = []
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_patchwork_patches_blacklist
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_patchwork_patches_blacklist = []
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_patchwork_patches_checkpatch_cmd
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_patchwork_patches_checkpatch_cmd = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_patchwork_patches_eof
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_patchwork_patches_eof = \(aqyes\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_get_patchwork_number_list_order
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_get_patchwork_number_list_order = \(aq\-delegate\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_rm_file_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_rm_file_name = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_cd_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_cd_name = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_linux_source_git_repo
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_linux_source_git_repo = "/home/git/linux.git"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_linux_source_git_repo_user
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_linux_source_git_repo_user = \(aqanonymous\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_linux_source_git_branch
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_linux_source_git_branch = "master"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_get_linux_source_git_reference
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_get_linux_source_git_reference = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_local_patches_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_local_patches_dir = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_local_patches_checkpatch_cmd
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_local_patches_checkpatch_cmd = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_apply_local_patches_checkpatch_cmd_strict
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_apply_local_patches_checkpatch_cmd_strict = "no"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_get_list_of_files_mask
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_get_list_of_files_mask = \(aq*\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_boardname
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_boardname = \(aqconfig.boardname\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_clean
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_clean = \(aqyes\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_modules
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_modules = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_modules_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_modules_path = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_dt_name
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_dt_name = \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_append_dt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_append_dt = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_load_addr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_load_addr = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_make_target
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_make_target = \(aquImage\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_fit_its_file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_fit_its_file = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_fit_file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_fit_file = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_mkimage
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_mkimage = \(aq/home/hs/i2c/u\-boot/tools/mkimage\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_compile_linux_makeoptions
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_compile_linux_makeoptions = \(aq\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS workfd_get_patchwork_number_user
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
workfd_get_patchwork_number_user = \(aqhs\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS workfd_get_patchwork_number_list_order
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
workfd_get_patchwork_number_list_order = \(aq\-delegate\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_connect_with_kermit_ssh
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_connect_with_kermit_ssh = "none"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_connect_with_kermit_rlogin
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_connect_with_kermit_rlogin = "none"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS kermit_line
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
kermit_line = \(aq/dev/ttyUSB0\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS kermit_speed
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
kermit_speed = \(aq115200\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_tftp_file_addr
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_tftp_file_addr = \(aqconfig.ub_load_board_env_addr\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_denx_power_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_denx_power_tc = \(aqtc_lab_denx_power.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_denx_get_power_state_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_denx_get_power_state_tc = \(aqtc_lab_denx_get_power_state.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_denx_connect_to_board_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_denx_connect_to_board_tc = \(aqtc_lab_denx_connect_to_board.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lab_denx_disconnect_from_board_tc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lab_denx_disconnect_from_board_tc = \(aqtc_lab_denx_disconnect_from_board.py\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_memory_ram_ws_base
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_memory_ram_ws_base = \(aqundef\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_memory_ram_ws_base_alt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_memory_ram_ws_base_alt = \(aqundef\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_memory_ram_big
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_memory_ram_big = \(aqundef\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_lx_trigger_wdt_cmd
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_lx_trigger_wdt_cmd = \(aq/home/hs/wdt &\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_create_ubi_rootfs_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_create_ubi_rootfs_path = \(aq/opt/eldk\-5.4/armv7a\-hf/rootfs\-minimal\-mtdutils\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_create_ubi_rootfs_target
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_create_ubi_rootfs_target = \(aq/tftpboot/dxr2/tbot/rootfs\-minimal.ubifs\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_i2c_help_with_bus
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_i2c_help_with_bus = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS dfu_test_sizes_default
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dfu_test_sizes_default = [
64 \- 1,
64,
64 + 1,
128 \- 1,
128,
128 + 1,
960 \- 1,
960,
960 + 1,
4096 \- 1,
4096,
4096 + 1,
1024 * 1024 \- 1,
1024 * 1024,
8 * 1024 * 1024,
]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS workfd_ssh_cmd_prompt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
workfd_ssh_cmd_prompt = \(aq$\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS linux_prompt_default
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
linux_prompt_default = \(aqroot@generic\-armv7a\-hf:~# \(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS labprompt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
labprompt = \(aqconfig.linux_prompt\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_dot
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_dot = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_statistic
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_statistic = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_dashboard
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_dashboard = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_webpatch
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_webpatch = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_html_log
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_html_log = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS create_doc
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
create_doc = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_ub_test_py_hook_script_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_ub_test_py_hook_script_path = \(aq$HOME/testframework/hook\-scripts\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS switch_su_board
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
switch_su_board = \(aqlab\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_ssh
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_ssh = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_ssh_prompt
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_ssh_prompt = \(aq$\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_su
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_su = \(aqno\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_dev = \(aqcan0\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_bitrate
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_bitrate = \(aq500000\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_iproute_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_iproute_dir = \(aq/home/hs/iproute2\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_can_util_dir
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_can_util_dir = \(aq/home/hs/can\-utils\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_hdparm_path
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_hdparm_path = \(aq/home/hs/shc/hdparm\-9.50/\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS tc_workfd_hdparm_dev
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tc_workfd_hdparm_dev = \(aq/dev/mmcblk1\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INDICES AND TABLES
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Heiko Schocher
.SH COPYRIGHT
2016, Heiko Schocher
.\" Generated by docutils manpage writer.
.
