Documentation of tbot variables
===============================

config_result:
  return value from TC:
    tc_workfd_get_uboot_config_hex.py
    tc_workfd_get_uboot_config_string.py
  founded string/hex value
  else 'undef'

loglevel:

set the used loglevel for tbots logfile.

values:
Level     Numeric value
CRITICAL  50
ERROR     40
WARNING   30
CON       25             log write/read to fd only
INFO      20             more Infos
DEBUG     10
NOTSET     0

tc_lab_source_dir:
  directory on the lab PC, where tbot downloads source code

linux_prompt_default:
  used in src/lab_api/state_linux.py
  prompt expected after linux is booted on the board.
  default:
  'root@generic-armv7a-hf:~#'

state_linux_timeout
  used in src/lab_api/state_linux.py
  timeout in seconds, until connection detects, no chars
  from console.
  default: 4

workfd_get_patchwork_number_user:
  used in tc_workfd_get_patchwork_number_list.py
  user for which the patchwork list get created
  default:
  'hs'
  special values:
  'all' get all patches from patchwork

workfd_get_patchwork_number_list_order:
  used in tc_workfd_get_patchwork_number_list.py
  define the order with which the patchwork webpage sorts
  the patches.
  default:
  '-delegate'
  special values:
  '-date'

tc_workfd_apply_patchwork_patches_eof:
  used in tc_workfd_apply_patchwork_patches.py
  end testcase with False, if appling patch fails
  default:
  'yes'

Testcases
=========

tc_lab_denx_get_power_state_tc:
  name of the TC which gets called for getting the current
  power state.
  default:
  'tc_lab_denx_get_power_state.py'

tc_lab_denx_power_tc:
  name of the TC which gets called for setting a new
  power state.
  default:
  'tc_lab_denx_power.py'

tc_lab_denx_connect_to_board_tc:
  name of the TC which gets called for connecting to
  the boards console.
  default:
  'tc_lab_denx_connect_to_board.py'

tc_workfd_get_uboot_config_hex.py:
  get a hex value from a config file
  Input:
  tb.tc_workfd_cd_name: name of the dir, where to find the
    config files.
  tb.uboot_get_parameter_file_list: list of files, where TC searches
    for the define
  tb.uboot_config_option: config option which get searched

  return value:
  TC ends True, if hex value found, else False
  tb.config_result: founded hex value, else 'undef'

tc_workfd_get_uboot_config_string.py:
  get a string value from a config file
  Input:
  tb.tc_workfd_cd_name: name of the dir, where to find the
    config files.
  tb.uboot_get_parameter_file_list: list of files, where TC searches
    for the define
  tb.uboot_config_option: config option which get searched

  return value:
  TC ends True, if string value found, else False
  tb.config_result: founded string value, else 'undef'

tc_workfd_goto_lab_source_dir.py:
  for switching into tc_lab_source_dir
tc_workfd_goto_linux_code.py:
  going into linux code for the board
tc_workfd_goto_uboot_code.py:
  going into uboot code for the board
tb.tc_workfd_rm_linux_code.py:
  delete linux code
tc_workfd_rm_uboot_code.py:
  delete uboot code

tc_workfd_ssh.py:
  connect over ssh testcase.
  tb.workfd_ssh_cmd:
    string after "ssh"
  tb.workfd_ssh_cmd_prompt:
    prompt after login into ssh
    string after "ssh"
