write a testcase
================

A TC is written in python, so you can use python as usual. For accessing
the boards console, use functions from the tbotlib, therefore

First import the tbotlib with the line:

  from tbotlib import tbot

If your TC uses variables, please add a line which adds them to
the log file (for debugging purposes):

  logging.info("args: %s ...", tb.varname, ...)

Say tbot, for which board state your TC is valid with:

  tb.set_board_state("u-boot")

Then you are ready ... and you can use the tbotlib functions
for writting/reading to connection handles.

* Big fat warning *

Only return from a TC, if you have read the prompt from
a command. Returning without readden the prompt, will end
in complete confusion of tbot, as the next TC gets the
prompt from the previous command ...

Therefore a "normal" TC should use the following functions:

- sending commands

  - eof_write_cmd(con_handle, command_string)
  - eof_write_cmd_list(con_handle, list_of_commands)
  - write_lx_cmd_check(con_handle, cmd_string, endTC)
    write a linux command to con_handle, and check at the
    end, if command was successfull
  - write_cmd_check(con_handle, cmd, string)
    write a cmd to con_handle, and check, if a string
    is read
  - eof_write_cmd_check(con_handle, cmd, string)
    write a cmd to con_handle, and check, if a string
    is read. If string is not read end tbot with failure.

- analysing commandoutput

  - tbot_read_line_and_check_strings(con_handle, list_of_strings)
    read from con_handle, and return list index (! string), if
    a string from list_of_strings is found. If prompt found
    return 'prompt'
  - tbot_rup_check_all_strings(con_handle, list_of_strings, endTC)
    read until prompt from on_handle, and check if all
    strings from list_of_strings are found. If endTC = True
    end tbot with failure, if not all strings are found.
  - tbot_rup_error_on_strings(con_handle, strings, endTC)
    read until prompt, and check if a string in strings is
    found. If so, return false. If endTC = True end tbot with
    failure.

- misc functions:

  - call another TC:

    - eof_call_tc(name, **args)
      use this functions, if you want to call TC name and
      if it fails, end tbot

    - return = call_tc(name, **args)
      use this function, if you want to call TC name and
      get the TC return value.

  - open a new connection:

    con_handle = Connection(tb, name)

    example: src/tc/linux/tc_workfd_can.py

  - close a connection:

    del con_handle

  - statusprint(string)
    If you want to make some statusoutput on the tbot console
    printed if debugstatus=True is set.

- Now it is possible to define functions in testcases, and import
  them in other testcases and call them. Historically the idea was
  to write a testcase in a format near to a linux shell script,
  and don;t use to much python in it ... but why not using
  functions?

  For a demo how to use python functions in testcases, see
  [1] src/tc/uboot/tc_ub_testfkt.py

  This testcase defines 2 functions, which can be used from other
  testcases, for example used in

  [2] src/tc/uboot/tc_ub_setenv_fkt.py

  Testcase [1] can still called from the cmdline, see therefore
  the comment in the testcases. You need only to add now on such a
  testcase at the end, the lines after:

  'if __name__ == "tbotlib":'

  There you must setup the vars, the testcase need. Here you can
  now pass to a testcase through the tbot cmdlineparameter "-a"
  an argumentlist to the testcase, and you can pass them to the
  functions. You only should use the passed arguments when

  if tb.arguments and (tb.starttestcase == tb.calltestcase):

  checks if we have arguments *and* if the testcase is called
  from the cmdline and not from another testcase (which may
  set through 'tb.config' variables ...)

  If another testcases uses the functions, this part is
  not executed, as 'if __name__ == "tbotlib":' is not true.

  also you must add before each function python decorator:
  @tb_call_tc

  Here we do necessary tasks we need to do before end after
  calling a tbot function.
